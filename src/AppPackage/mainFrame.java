package AppPackage;


import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author home
 */
public class mainFrame extends javax.swing.JFrame implements PropertyChangeListener  {
    Connection conn=null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
        lbl_user.setText(login.txt_loginUsername.getText()+": logged in");
        
        setExamVar();
        
        frame_StudentAdmission.setVisible(false);
        frame_editStudent.setVisible(false);
        
        frame_eng.setVisible(false);
        frame_kis.setVisible(false);
        frame_mat.setVisible(false);
        frame_phy.setVisible(false);
        frame_che.setVisible(false);
        frame_bio.setVisible(false);
        frame_his.setVisible(false);
        frame_geo.setVisible(false);
        frame_cre.setVisible(false);
        frame_agr.setVisible(false);
        frame_bs.setVisible(false);        
        frame_studentResults.setVisible(false);
        frame_subAnalysis.setVisible(false);
        frame_trans.setVisible(false);
        frame_houseAnalysis.setVisible(false);
        
        frame_finalMarks.setVisible(false);
        txt_studentIDedit.setVisible(false);
        txt_studentADMN.setVisible(false);
        txt_finalMarks.setVisible(false);
        txt_finalMarksKis.setVisible(false);
        txt_finalMarksMath.setVisible(false);
        txt_finalMarksPhy.setVisible(false);
        txt_finalMarksChe.setVisible(false);
        txt_finalMarksBio.setVisible(false);
        txt_finalMarksHis.setVisible(false);
        txt_finalMarksGeo.setVisible(false);
        txt_finalMarksCRE.setVisible(false);
        txt_finalMarksAgr.setVisible(false);
        txt_finalMarksBs.setVisible(false);
        txt_subjectG.setVisible(false);
        
        
        txt_admnStudentResult.setVisible(false);  
        geneState.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender = new javax.swing.ButtonGroup();
        genderEdit = new javax.swing.ButtonGroup();
        changeNum = new javax.swing.ButtonGroup();
        PopupMenu = new javax.swing.JPopupMenu();
        menuEng = new javax.swing.JMenuItem();
        menuKis = new javax.swing.JMenuItem();
        menuMaths = new javax.swing.JMenuItem();
        menuPhy = new javax.swing.JMenuItem();
        menuBio = new javax.swing.JMenuItem();
        menuChem = new javax.swing.JMenuItem();
        menuGeo = new javax.swing.JMenuItem();
        menuHis = new javax.swing.JMenuItem();
        menuCre = new javax.swing.JMenuItem();
        menuAgr = new javax.swing.JMenuItem();
        menuBis = new javax.swing.JMenuItem();
        combo_userUserType = new javax.swing.JComboBox();
        editPic = new javax.swing.ButtonGroup();
        DesktopPane = new javax.swing.JDesktopPane();
        frame_trans = new javax.swing.JInternalFrame();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        combo_classTrans = new javax.swing.JComboBox();
        combo_classNameTrans = new javax.swing.JComboBox();
        chooser_YearTrans = new com.toedter.calendar.JYearChooser();
        combo_marksTrans = new javax.swing.JComboBox();
        btn_printTrans = new javax.swing.JButton();
        frame_houseAnalysis = new javax.swing.JInternalFrame();
        jLabel81 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        combo_classAnaHouse = new javax.swing.JComboBox();
        chooser_marksYearAnaHouse = new com.toedter.calendar.JYearChooser();
        combo_marksTermAnaHouse = new javax.swing.JComboBox();
        jScrollPane17 = new javax.swing.JScrollPane();
        tbl_houseAnaMarks = new javax.swing.JTable();
        btn_getHouseAna = new javax.swing.JButton();
        txt_genHouseAna = new javax.swing.JButton();
        frame_subAnalysis = new javax.swing.JInternalFrame();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        combo_classAna = new javax.swing.JComboBox();
        combo_classNameAna = new javax.swing.JComboBox();
        combo_subjectAna = new javax.swing.JComboBox();
        chooser_marksYearAna = new com.toedter.calendar.JYearChooser();
        combo_marksTermAna = new javax.swing.JComboBox();
        jScrollPane16 = new javax.swing.JScrollPane();
        tbl_anaMarks = new javax.swing.JTable();
        btn_getStudentsAna = new javax.swing.JButton();
        jLabel76 = new javax.swing.JLabel();
        txt_genSubAna = new javax.swing.JButton();
        txt_subjectG = new javax.swing.JTextField();
        frame_studentResults = new javax.swing.JInternalFrame();
        btn_genStudentAna = new javax.swing.JButton();
        txt_searchStudentResults = new javax.swing.JTextField();
        jScrollPane14 = new javax.swing.JScrollPane();
        tbl_studentSearchResult = new javax.swing.JTable();
        jLabel69 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        tbl_studentResults = new javax.swing.JTable();
        txt_admnStudentResult = new javax.swing.JTextField();
        frame_bs = new javax.swing.JInternalFrame();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        combo_classMarksBs = new javax.swing.JComboBox();
        combo_classNameMarksBs = new javax.swing.JComboBox();
        chooser_marksYearBs = new com.toedter.calendar.JYearChooser();
        combo_marksTermBs = new javax.swing.JComboBox();
        jScrollPane13 = new javax.swing.JScrollPane();
        tbl_bsMarks = new javax.swing.JTable();
        btn_getStudentsBs = new javax.swing.JButton();
        txt_finalMarksBs = new javax.swing.JTextField();
        frame_agr = new javax.swing.JInternalFrame();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        combo_classMarksAgr = new javax.swing.JComboBox();
        combo_classNameMarksAgr = new javax.swing.JComboBox();
        chooser_marksYearAgr = new com.toedter.calendar.JYearChooser();
        combo_marksTermAgr = new javax.swing.JComboBox();
        jScrollPane12 = new javax.swing.JScrollPane();
        tbl_agrMarks = new javax.swing.JTable();
        btn_getStudentsAgr = new javax.swing.JButton();
        txt_finalMarksAgr = new javax.swing.JTextField();
        frame_cre = new javax.swing.JInternalFrame();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        combo_classMarksCRE = new javax.swing.JComboBox();
        combo_classNameMarksCRE = new javax.swing.JComboBox();
        chooser_marksYearCRE = new com.toedter.calendar.JYearChooser();
        combo_marksTermCRE = new javax.swing.JComboBox();
        jScrollPane11 = new javax.swing.JScrollPane();
        tbl_creMarks = new javax.swing.JTable();
        btn_getStudentsCRE = new javax.swing.JButton();
        txt_finalMarksCRE = new javax.swing.JTextField();
        frame_geo = new javax.swing.JInternalFrame();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        combo_classMarksGeo = new javax.swing.JComboBox();
        combo_classNameMarksGeo = new javax.swing.JComboBox();
        chooser_marksYearGeo = new com.toedter.calendar.JYearChooser();
        combo_marksTermGeo = new javax.swing.JComboBox();
        jScrollPane10 = new javax.swing.JScrollPane();
        tbl_geoMarks = new javax.swing.JTable();
        btn_getStudentsGeo = new javax.swing.JButton();
        txt_finalMarksGeo = new javax.swing.JTextField();
        frame_his = new javax.swing.JInternalFrame();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        combo_classMarksHis = new javax.swing.JComboBox();
        combo_classNameMarksHis = new javax.swing.JComboBox();
        chooser_marksYearHis = new com.toedter.calendar.JYearChooser();
        combo_marksTermHis = new javax.swing.JComboBox();
        jScrollPane9 = new javax.swing.JScrollPane();
        tbl_hisMarks = new javax.swing.JTable();
        btn_getStudentsHis = new javax.swing.JButton();
        txt_finalMarksHis = new javax.swing.JTextField();
        frame_bio = new javax.swing.JInternalFrame();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        combo_classMarksBio = new javax.swing.JComboBox();
        combo_classNameMarksBio = new javax.swing.JComboBox();
        chooser_marksYearBio = new com.toedter.calendar.JYearChooser();
        combo_marksTermBio = new javax.swing.JComboBox();
        jScrollPane8 = new javax.swing.JScrollPane();
        tbl_bioMarks = new javax.swing.JTable();
        btn_getStudentsBio = new javax.swing.JButton();
        txt_finalMarksBio = new javax.swing.JTextField();
        frame_che = new javax.swing.JInternalFrame();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        combo_classMarksChe = new javax.swing.JComboBox();
        combo_classNameMarksChe = new javax.swing.JComboBox();
        chooser_marksYearChe = new com.toedter.calendar.JYearChooser();
        combo_marksTermChe = new javax.swing.JComboBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbl_cheMarks = new javax.swing.JTable();
        btn_getStudentsChe = new javax.swing.JButton();
        txt_finalMarksChe = new javax.swing.JTextField();
        frame_phy = new javax.swing.JInternalFrame();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        combo_classMarksPhy = new javax.swing.JComboBox();
        combo_classNameMarksPhy = new javax.swing.JComboBox();
        chooser_marksYearPhy = new com.toedter.calendar.JYearChooser();
        combo_marksTermPhy = new javax.swing.JComboBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbl_phyMarks = new javax.swing.JTable();
        btn_getStudentsPhy = new javax.swing.JButton();
        txt_finalMarksPhy = new javax.swing.JTextField();
        frame_mat = new javax.swing.JInternalFrame();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        combo_classMarksMath = new javax.swing.JComboBox();
        combo_classNameMarksMath = new javax.swing.JComboBox();
        chooser_marksYearMath = new com.toedter.calendar.JYearChooser();
        combo_marksTermMath = new javax.swing.JComboBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbl_mathMarks = new javax.swing.JTable();
        btn_getStudentsMath = new javax.swing.JButton();
        txt_finalMarksMath = new javax.swing.JTextField();
        frame_kis = new javax.swing.JInternalFrame();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        combo_classMarksKis = new javax.swing.JComboBox();
        combo_classNameMarksKis = new javax.swing.JComboBox();
        chooser_marksYearKis = new com.toedter.calendar.JYearChooser();
        combo_marksTermKis = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_kisMarks = new javax.swing.JTable();
        btn_getStudentsKis = new javax.swing.JButton();
        txt_finalMarksKis = new javax.swing.JTextField();
        frame_eng = new javax.swing.JInternalFrame();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        combo_classMarks = new javax.swing.JComboBox();
        combo_classNameMarks = new javax.swing.JComboBox();
        chooser_marksYear = new com.toedter.calendar.JYearChooser();
        combo_marksTerm = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_engMarks = new javax.swing.JTable();
        btn_getStudents = new javax.swing.JButton();
        txt_finalMarks = new javax.swing.JTextField();
        frame_StudentAdmission = new javax.swing.JInternalFrame();
        cmd_saveAdmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_fname = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_sname = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        radio_male = new javax.swing.JRadioButton();
        radio_female = new javax.swing.JRadioButton();
        jLabel63 = new javax.swing.JLabel();
        txt_dob = new com.toedter.calendar.JDateChooser();
        jLabel64 = new javax.swing.JLabel();
        chooser_KCPEyear = new com.toedter.calendar.JYearChooser();
        jLabel65 = new javax.swing.JLabel();
        txt_KCPEmarks = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        txt_birthCert = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txt_adminNos = new javax.swing.JTextField();
        selectImage_btn = new javax.swing.JButton();
        imagePath_txt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        combo_class = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        combo_house = new javax.swing.JComboBox();
        combo_className = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        frame_editStudent = new javax.swing.JInternalFrame();
        jPanel3 = new javax.swing.JPanel();
        txt_nameEdit = new javax.swing.JTextField();
        radio_femaleEdit = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        radio_maleEdit = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        txt_adminNosEdit = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        combo_classEdit = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        combo_houseEdit = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        combo_classNameEdit = new javax.swing.JComboBox();
        radio_keepNum = new javax.swing.JRadioButton();
        radio_changeNum = new javax.swing.JRadioButton();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        chooser_KCPEyearEdit = new com.toedter.calendar.JYearChooser();
        jLabel70 = new javax.swing.JLabel();
        txt_KCPEmarksEdit = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        txt_birthCertEdit = new javax.swing.JTextField();
        edit_dob = new com.toedter.calendar.JDateChooser();
        editAttach_btn = new javax.swing.JButton();
        editImage_txt = new javax.swing.JTextField();
        keepRadio = new javax.swing.JRadioButton();
        changeRadio = new javax.swing.JRadioButton();
        btn_saveStudenttEdit = new javax.swing.JButton();
        txt_searchStudentEdit = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_studentEdit = new javax.swing.JTable();
        btn_deleteStudenttEdit = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txt_studentIDedit = new javax.swing.JTextField();
        txt_studentADMN = new javax.swing.JTextField();
        frame_finalMarks = new javax.swing.JInternalFrame();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        combo_classFinalMarks = new javax.swing.JComboBox();
        combo_classNameFinalMarks = new javax.swing.JComboBox();
        chooser_finalMarksYear = new com.toedter.calendar.JYearChooser();
        combo_finalMarksTerm = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_finalMarks = new javax.swing.JTable();
        btn_getResutls = new javax.swing.JButton();
        btn_genFinalReport = new javax.swing.JButton();
        btn_genFinalReportStream = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        menuBtn_addStudent = new javax.swing.JButton();
        menuBtn_editStudent = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        menuBtn_viewFinalMarks = new javax.swing.JButton();
        menuBtn_viewStudentPerfomance = new javax.swing.JButton();
        menuBtn_viewSubAnalysis = new javax.swing.JButton();
        menuBtn_viewHouseAnalysis = new javax.swing.JButton();
        menuBtn_printTranscripts = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        lbl_examV = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        lbl_catV = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        lbl_user = new javax.swing.JLabel();
        StatusBar = new org.jdesktop.swingx.JXStatusBar();
        showProgress = new javax.swing.JProgressBar();
        geneState = new javax.swing.JLabel();
        lbl_bottomExamV = new javax.swing.JLabel();
        lbl_bottomCATV = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        TaskPaneContainer = new org.jdesktop.swingx.JXTaskPaneContainer();
        TaskPane_students = new org.jdesktop.swingx.JXTaskPane();
        Hyperlink_addStudent = new org.jdesktop.swingx.JXHyperlink();
        Hyperlink_editStudent = new org.jdesktop.swingx.JXHyperlink();
        TaskPane_reports = new org.jdesktop.swingx.JXTaskPane();
        Hyperlink_finalResults = new org.jdesktop.swingx.JXHyperlink();
        Hyperlink_perfomanceResults = new org.jdesktop.swingx.JXHyperlink();
        Hyperlink_subjectAnalysis = new org.jdesktop.swingx.JXHyperlink();
        Hyperlink_houseAnalysis = new org.jdesktop.swingx.JXHyperlink();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menu_editUsers = new javax.swing.JMenuItem();
        menu_manTeachers = new javax.swing.JMenuItem();
        menu_setVar = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menu_restore = new javax.swing.JMenuItem();
        menu_sysLog = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menu_eng = new javax.swing.JMenuItem();
        menu_kis = new javax.swing.JMenuItem();
        menu_maths = new javax.swing.JMenuItem();
        menu_phy = new javax.swing.JMenuItem();
        menu_bio = new javax.swing.JMenuItem();
        menu_chem = new javax.swing.JMenuItem();
        menu_geo = new javax.swing.JMenuItem();
        menu_his = new javax.swing.JMenuItem();
        menu_cre = new javax.swing.JMenuItem();
        menu_agr = new javax.swing.JMenuItem();
        menu_bs = new javax.swing.JMenuItem();
        menu_logout = new javax.swing.JMenu();

        menuEng.setText("English");
        menuEng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEngActionPerformed(evt);
            }
        });
        PopupMenu.add(menuEng);

        menuKis.setText("Kiswahili");
        menuKis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuKisActionPerformed(evt);
            }
        });
        PopupMenu.add(menuKis);

        menuMaths.setText("Maths");
        menuMaths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMathsActionPerformed(evt);
            }
        });
        PopupMenu.add(menuMaths);

        menuPhy.setText("Physics");
        menuPhy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPhyActionPerformed(evt);
            }
        });
        PopupMenu.add(menuPhy);

        menuBio.setText("Biology");
        menuBio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBioActionPerformed(evt);
            }
        });
        PopupMenu.add(menuBio);

        menuChem.setText("Chemistry");
        menuChem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuChemActionPerformed(evt);
            }
        });
        PopupMenu.add(menuChem);

        menuGeo.setText("Geography");
        menuGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGeoActionPerformed(evt);
            }
        });
        PopupMenu.add(menuGeo);

        menuHis.setText("History");
        menuHis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHisActionPerformed(evt);
            }
        });
        PopupMenu.add(menuHis);

        menuCre.setText("CRE");
        menuCre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCreActionPerformed(evt);
            }
        });
        PopupMenu.add(menuCre);

        menuAgr.setText("Agriculture");
        menuAgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAgrActionPerformed(evt);
            }
        });
        PopupMenu.add(menuAgr);

        menuBis.setText("Business");
        menuBis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBisActionPerformed(evt);
            }
        });
        PopupMenu.add(menuBis);

        combo_userUserType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Admin", "English", "Kiswahili", "Physics", "Chemistry", "Geography", "Maths", "Biology", "Agriculture", "History", "Business", "CRE" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NDURURUNO SEC MARKS MANAGEMENT");
        setIconImage(Toolkit.getDefaultToolkit().getImage("icon\\task.png"));

        DesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DesktopPaneMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DesktopPaneMouseReleased(evt);
            }
        });

        frame_trans.setClosable(true);
        frame_trans.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_trans.setIconifiable(true);
        frame_trans.setTitle("Print Transcripts");
        frame_trans.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/print.png"))); // NOI18N
        frame_trans.setVisible(true);

        jLabel77.setText("Form");

        jLabel78.setText("Class name");

        jLabel79.setText("Set Year");

        jLabel80.setText("Set Term");

        combo_classTrans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTrans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        btn_printTrans.setBackground(new java.awt.Color(255, 209, 43));
        btn_printTrans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/print.png"))); // NOI18N
        btn_printTrans.setText("Generate Transcripts");
        btn_printTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_printTransActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_transLayout = new javax.swing.GroupLayout(frame_trans.getContentPane());
        frame_trans.getContentPane().setLayout(frame_transLayout);
        frame_transLayout.setHorizontalGroup(
            frame_transLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_transLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_transLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frame_transLayout.createSequentialGroup()
                        .addComponent(jLabel77)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel78)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frame_transLayout.createSequentialGroup()
                        .addComponent(jLabel79)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_YearTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel80)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_printTrans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        frame_transLayout.setVerticalGroup(
            frame_transLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_transLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_transLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel77)
                    .addComponent(jLabel78)
                    .addComponent(combo_classTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_classNameTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frame_transLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel79)
                    .addComponent(chooser_YearTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_transLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel80)))
                .addGap(18, 18, 18)
                .addComponent(btn_printTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_trans);
        frame_trans.setBounds(150, 90, 237, 201);

        frame_houseAnalysis.setClosable(true);
        frame_houseAnalysis.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_houseAnalysis.setIconifiable(true);
        frame_houseAnalysis.setTitle("House Results Analysis");
        frame_houseAnalysis.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/houseReport.png"))); // NOI18N
        frame_houseAnalysis.setVisible(true);

        jLabel81.setText("Form");

        jLabel83.setText("Set Year");

        jLabel84.setText("Set Term");

        combo_classAnaHouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermAnaHouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_houseAnaMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "House", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "E", "TOT", "TOT MRKS", "M.MRK"
            }
        ));
        jScrollPane17.setViewportView(tbl_houseAnaMarks);

        btn_getHouseAna.setBackground(new java.awt.Color(255, 209, 43));
        btn_getHouseAna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getHouseAna.setText("Show Results");
        btn_getHouseAna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getHouseAnaActionPerformed(evt);
            }
        });

        txt_genHouseAna.setBackground(new java.awt.Color(255, 209, 43));
        txt_genHouseAna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports2.png"))); // NOI18N
        txt_genHouseAna.setText("Generate house analysis report");
        txt_genHouseAna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_genHouseAnaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_houseAnalysisLayout = new javax.swing.GroupLayout(frame_houseAnalysis.getContentPane());
        frame_houseAnalysis.getContentPane().setLayout(frame_houseAnalysisLayout);
        frame_houseAnalysisLayout.setHorizontalGroup(
            frame_houseAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_houseAnalysisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_houseAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                    .addGroup(frame_houseAnalysisLayout.createSequentialGroup()
                        .addComponent(jLabel81)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classAnaHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel83)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearAnaHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel84)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermAnaHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(btn_getHouseAna))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frame_houseAnalysisLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txt_genHouseAna)))
                .addContainerGap())
        );
        frame_houseAnalysisLayout.setVerticalGroup(
            frame_houseAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_houseAnalysisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_houseAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_houseAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel81)
                        .addComponent(combo_classAnaHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel83))
                    .addComponent(btn_getHouseAna)
                    .addComponent(chooser_marksYearAnaHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_houseAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermAnaHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel84)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_genHouseAna)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_houseAnalysis);
        frame_houseAnalysis.setBounds(10, 90, 843, 281);

        frame_subAnalysis.setClosable(true);
        frame_subAnalysis.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_subAnalysis.setIconifiable(true);
        frame_subAnalysis.setTitle("Subject Results Analysis");
        frame_subAnalysis.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/subReport.png"))); // NOI18N
        frame_subAnalysis.setVisible(true);

        jLabel72.setText("Form");

        jLabel73.setText("Class name");

        jLabel74.setText("Set Year");

        jLabel75.setText("Set Term");

        combo_classAna.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_subjectAna.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "english", "kiswahili", "physics", "chemistry", "geography", "maths", "biology", "agriculture", "histroy", "buisness_studies", "cre" }));

        combo_marksTermAna.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_anaMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gender", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "E", "TOT", "TOT MRKS", "M.MRK"
            }
        ));
        tbl_anaMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_anaMarksKeyReleased(evt);
            }
        });
        jScrollPane16.setViewportView(tbl_anaMarks);

        btn_getStudentsAna.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsAna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsAna.setText("Show Results");
        btn_getStudentsAna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsAnaActionPerformed(evt);
            }
        });

        jLabel76.setText("Subject");

        txt_genSubAna.setBackground(new java.awt.Color(255, 209, 43));
        txt_genSubAna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports2.png"))); // NOI18N
        txt_genSubAna.setText("Generate subject analysis report");
        txt_genSubAna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_genSubAnaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_subAnalysisLayout = new javax.swing.GroupLayout(frame_subAnalysis.getContentPane());
        frame_subAnalysis.getContentPane().setLayout(frame_subAnalysisLayout);
        frame_subAnalysisLayout.setHorizontalGroup(
            frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_subAnalysisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane16)
                    .addGroup(frame_subAnalysisLayout.createSequentialGroup()
                        .addComponent(jLabel72)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel73)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel76)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combo_subjectAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                        .addComponent(jLabel74)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel75)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(btn_getStudentsAna))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frame_subAnalysisLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txt_subjectG, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_genSubAna)))
                .addContainerGap())
        );
        frame_subAnalysisLayout.setVerticalGroup(
            frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_subAnalysisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel72)
                        .addComponent(jLabel73)
                        .addComponent(combo_classAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel74)
                        .addComponent(combo_subjectAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel76))
                    .addComponent(btn_getStudentsAna)
                    .addComponent(chooser_marksYearAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermAna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel75)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_subAnalysisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_genSubAna)
                    .addComponent(txt_subjectG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_subAnalysis);
        frame_subAnalysis.setBounds(10, 90, 843, 300);

        frame_studentResults.setClosable(true);
        frame_studentResults.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_studentResults.setIconifiable(true);
        frame_studentResults.setTitle("Student Results Analysis");
        frame_studentResults.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/studentReport.png"))); // NOI18N
        frame_studentResults.setVisible(true);

        btn_genStudentAna.setBackground(new java.awt.Color(255, 209, 43));
        btn_genStudentAna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports2.png"))); // NOI18N
        btn_genStudentAna.setText("Generate analysis report");
        btn_genStudentAna.setEnabled(false);
        btn_genStudentAna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genStudentAnaActionPerformed(evt);
            }
        });

        txt_searchStudentResults.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchStudentResultsKeyReleased(evt);
            }
        });

        tbl_studentSearchResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "Form", "Class Name", "House"
            }
        ));
        tbl_studentSearchResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_studentSearchResultMouseClicked(evt);
            }
        });
        jScrollPane14.setViewportView(tbl_studentSearchResult);

        jLabel69.setText("Search Student:");

        tbl_studentResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Form", "Term", "Year", "Average", "Grade"
            }
        ));
        tbl_studentResults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_studentResultsMouseClicked(evt);
            }
        });
        jScrollPane15.setViewportView(tbl_studentResults);

        javax.swing.GroupLayout frame_studentResultsLayout = new javax.swing.GroupLayout(frame_studentResults.getContentPane());
        frame_studentResults.getContentPane().setLayout(frame_studentResultsLayout);
        frame_studentResultsLayout.setHorizontalGroup(
            frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_studentResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_studentResultsLayout.createSequentialGroup()
                        .addGroup(frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frame_studentResultsLayout.createSequentialGroup()
                                .addComponent(jLabel69)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_searchStudentResults)))
                        .addGap(18, 18, 18)
                        .addGroup(frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .addGroup(frame_studentResultsLayout.createSequentialGroup()
                                .addComponent(txt_admnStudentResult, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frame_studentResultsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_genStudentAna)))
                .addContainerGap())
        );
        frame_studentResultsLayout.setVerticalGroup(
            frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_studentResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_searchStudentResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel69)
                    .addComponent(txt_admnStudentResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_studentResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_genStudentAna, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_studentResults);
        frame_studentResults.setBounds(170, 150, 696, 294);

        frame_bs.setClosable(true);
        frame_bs.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_bs.setIconifiable(true);
        frame_bs.setTitle("Business Studies marks");
        frame_bs.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_bs.setVisible(true);

        jLabel59.setText("Form");

        jLabel60.setText("Class Name");

        jLabel61.setText("Set Year");

        jLabel62.setText("Set Term");

        combo_classMarksBs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermBs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_bsMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_bsMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_bsMarksKeyReleased(evt);
            }
        });
        jScrollPane13.setViewportView(tbl_bsMarks);

        btn_getStudentsBs.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsBs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsBs.setText("Show Students");
        btn_getStudentsBs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsBsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_bsLayout = new javax.swing.GroupLayout(frame_bs.getContentPane());
        frame_bs.getContentPane().setLayout(frame_bsLayout);
        frame_bsLayout.setHorizontalGroup(
            frame_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_bsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13)
                    .addGroup(frame_bsLayout.createSequentialGroup()
                        .addComponent(jLabel59)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel60)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jLabel61)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel62)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksBs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsBs)))
                .addContainerGap())
        );
        frame_bsLayout.setVerticalGroup(
            frame_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_bsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel59)
                        .addComponent(jLabel60)
                        .addComponent(combo_classMarksBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel61))
                    .addComponent(btn_getStudentsBs)
                    .addComponent(chooser_marksYearBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_bsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel62)
                        .addComponent(txt_finalMarksBs)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_bs);
        frame_bs.setBounds(150, 90, 570, 408);

        frame_agr.setClosable(true);
        frame_agr.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_agr.setIconifiable(true);
        frame_agr.setTitle("Agriculture marks");
        frame_agr.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_agr.setVisible(true);

        jLabel55.setText("Form");

        jLabel56.setText("Class Name");

        jLabel57.setText("Set Year");

        jLabel58.setText("Set Term");

        combo_classMarksAgr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermAgr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_agrMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_agrMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_agrMarksKeyReleased(evt);
            }
        });
        jScrollPane12.setViewportView(tbl_agrMarks);

        btn_getStudentsAgr.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsAgr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsAgr.setText("Show Students");
        btn_getStudentsAgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsAgrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_agrLayout = new javax.swing.GroupLayout(frame_agr.getContentPane());
        frame_agr.getContentPane().setLayout(frame_agrLayout);
        frame_agrLayout.setHorizontalGroup(
            frame_agrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_agrLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_agrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12)
                    .addGroup(frame_agrLayout.createSequentialGroup()
                        .addComponent(jLabel55)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel56)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jLabel57)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel58)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksAgr, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsAgr)))
                .addContainerGap())
        );
        frame_agrLayout.setVerticalGroup(
            frame_agrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_agrLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_agrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_agrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel55)
                        .addComponent(jLabel56)
                        .addComponent(combo_classMarksAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel57))
                    .addComponent(btn_getStudentsAgr)
                    .addComponent(chooser_marksYearAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_agrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermAgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel58)
                        .addComponent(txt_finalMarksAgr)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_agr);
        frame_agr.setBounds(150, 90, 570, 408);

        frame_cre.setClosable(true);
        frame_cre.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_cre.setIconifiable(true);
        frame_cre.setTitle("CRE marks");
        frame_cre.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_cre.setVisible(true);

        jLabel51.setText("Form");

        jLabel52.setText("Class name");

        jLabel53.setText("Set Year");

        jLabel54.setText("Set Term");

        combo_classMarksCRE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermCRE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_creMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_creMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_creMarksKeyReleased(evt);
            }
        });
        jScrollPane11.setViewportView(tbl_creMarks);

        btn_getStudentsCRE.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsCRE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsCRE.setText("Show Students");
        btn_getStudentsCRE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsCREActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_creLayout = new javax.swing.GroupLayout(frame_cre.getContentPane());
        frame_cre.getContentPane().setLayout(frame_creLayout);
        frame_creLayout.setHorizontalGroup(
            frame_creLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_creLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_creLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11)
                    .addGroup(frame_creLayout.createSequentialGroup()
                        .addComponent(jLabel51)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel52)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel53)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel54)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksCRE, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsCRE)))
                .addContainerGap())
        );
        frame_creLayout.setVerticalGroup(
            frame_creLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_creLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_creLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_creLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel51)
                        .addComponent(jLabel52)
                        .addComponent(combo_classMarksCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel53))
                    .addComponent(btn_getStudentsCRE)
                    .addComponent(chooser_marksYearCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_creLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermCRE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel54)
                        .addComponent(txt_finalMarksCRE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_cre);
        frame_cre.setBounds(150, 90, 570, 408);

        frame_geo.setClosable(true);
        frame_geo.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_geo.setIconifiable(true);
        frame_geo.setTitle("Geography marks");
        frame_geo.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_geo.setVisible(true);

        jLabel47.setText("Form");

        jLabel48.setText("Class name");

        jLabel49.setText("Set Year");

        jLabel50.setText("Set Term");

        combo_classMarksGeo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermGeo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_geoMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_geoMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_geoMarksKeyReleased(evt);
            }
        });
        jScrollPane10.setViewportView(tbl_geoMarks);

        btn_getStudentsGeo.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsGeo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsGeo.setText("Show Students");
        btn_getStudentsGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsGeoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_geoLayout = new javax.swing.GroupLayout(frame_geo.getContentPane());
        frame_geo.getContentPane().setLayout(frame_geoLayout);
        frame_geoLayout.setHorizontalGroup(
            frame_geoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_geoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_geoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10)
                    .addGroup(frame_geoLayout.createSequentialGroup()
                        .addComponent(jLabel47)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksGeo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsGeo)))
                .addContainerGap())
        );
        frame_geoLayout.setVerticalGroup(
            frame_geoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_geoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_geoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_geoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel47)
                        .addComponent(jLabel48)
                        .addComponent(combo_classMarksGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel49))
                    .addComponent(btn_getStudentsGeo)
                    .addComponent(chooser_marksYearGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_geoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermGeo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel50)
                        .addComponent(txt_finalMarksGeo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_geo);
        frame_geo.setBounds(150, 90, 570, 408);

        frame_his.setClosable(true);
        frame_his.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_his.setIconifiable(true);
        frame_his.setTitle("History marks");
        frame_his.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_his.setVisible(true);

        jLabel43.setText("Form");

        jLabel44.setText("Class name");

        jLabel45.setText("Set Year");

        jLabel46.setText("Set Term");

        combo_classMarksHis.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermHis.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_hisMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_hisMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_hisMarksKeyReleased(evt);
            }
        });
        jScrollPane9.setViewportView(tbl_hisMarks);

        btn_getStudentsHis.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsHis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsHis.setText("Show Students");
        btn_getStudentsHis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsHisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_hisLayout = new javax.swing.GroupLayout(frame_his.getContentPane());
        frame_his.getContentPane().setLayout(frame_hisLayout);
        frame_hisLayout.setHorizontalGroup(
            frame_hisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_hisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_hisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9)
                    .addGroup(frame_hisLayout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksHis, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsHis)))
                .addContainerGap())
        );
        frame_hisLayout.setVerticalGroup(
            frame_hisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_hisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_hisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_hisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel43)
                        .addComponent(jLabel44)
                        .addComponent(combo_classMarksHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel45))
                    .addComponent(btn_getStudentsHis)
                    .addComponent(chooser_marksYearHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_hisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel46)
                        .addComponent(txt_finalMarksHis)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_his);
        frame_his.setBounds(150, 90, 570, 408);

        frame_bio.setClosable(true);
        frame_bio.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_bio.setIconifiable(true);
        frame_bio.setTitle("Biology marks");
        frame_bio.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_bio.setVisible(true);

        jLabel39.setText("Form");

        jLabel40.setText("Class name");

        jLabel41.setText("Set Year");

        jLabel42.setText("Set Term");

        combo_classMarksBio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermBio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_bioMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_bioMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_bioMarksKeyReleased(evt);
            }
        });
        jScrollPane8.setViewportView(tbl_bioMarks);

        btn_getStudentsBio.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsBio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsBio.setText("Show Students");
        btn_getStudentsBio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsBioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_bioLayout = new javax.swing.GroupLayout(frame_bio.getContentPane());
        frame_bio.getContentPane().setLayout(frame_bioLayout);
        frame_bioLayout.setHorizontalGroup(
            frame_bioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_bioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_bioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(frame_bioLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksBio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsBio)))
                .addContainerGap())
        );
        frame_bioLayout.setVerticalGroup(
            frame_bioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_bioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_bioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_bioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel39)
                        .addComponent(jLabel40)
                        .addComponent(combo_classMarksBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel41))
                    .addComponent(btn_getStudentsBio)
                    .addComponent(chooser_marksYearBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_bioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermBio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel42)
                        .addComponent(txt_finalMarksBio)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_bio);
        frame_bio.setBounds(150, 90, 570, 408);

        frame_che.setClosable(true);
        frame_che.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_che.setIconifiable(true);
        frame_che.setTitle("Chemistry marks");
        frame_che.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_che.setVisible(true);

        jLabel35.setText("Form");

        jLabel36.setText("Class name");

        jLabel37.setText("Set Year");

        jLabel38.setText("Set Term");

        combo_classMarksChe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermChe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_cheMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_cheMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_cheMarksKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(tbl_cheMarks);

        btn_getStudentsChe.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsChe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsChe.setText("Show Students");
        btn_getStudentsChe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsCheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_cheLayout = new javax.swing.GroupLayout(frame_che.getContentPane());
        frame_che.getContentPane().setLayout(frame_cheLayout);
        frame_cheLayout.setHorizontalGroup(
            frame_cheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_cheLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_cheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(frame_cheLayout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksChe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsChe)))
                .addContainerGap())
        );
        frame_cheLayout.setVerticalGroup(
            frame_cheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_cheLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_cheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_cheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel35)
                        .addComponent(jLabel36)
                        .addComponent(combo_classMarksChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel37))
                    .addComponent(btn_getStudentsChe)
                    .addComponent(chooser_marksYearChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_cheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermChe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel38)
                        .addComponent(txt_finalMarksChe)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_che);
        frame_che.setBounds(150, 90, 570, 408);

        frame_phy.setClosable(true);
        frame_phy.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_phy.setIconifiable(true);
        frame_phy.setTitle("Physics marks");
        frame_phy.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_phy.setVisible(true);

        jLabel31.setText("Form");

        jLabel32.setText("Class name");

        jLabel33.setText("Set Year");

        jLabel34.setText("Set Term");

        combo_classMarksPhy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermPhy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_phyMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_phyMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_phyMarksKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(tbl_phyMarks);

        btn_getStudentsPhy.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsPhy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsPhy.setText("Show Students");
        btn_getStudentsPhy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsPhyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_phyLayout = new javax.swing.GroupLayout(frame_phy.getContentPane());
        frame_phy.getContentPane().setLayout(frame_phyLayout);
        frame_phyLayout.setHorizontalGroup(
            frame_phyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_phyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_phyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(frame_phyLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksPhy, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsPhy)))
                .addContainerGap())
        );
        frame_phyLayout.setVerticalGroup(
            frame_phyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_phyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_phyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_phyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31)
                        .addComponent(jLabel32)
                        .addComponent(combo_classMarksPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel33))
                    .addComponent(btn_getStudentsPhy)
                    .addComponent(chooser_marksYearPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_phyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermPhy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel34)
                        .addComponent(txt_finalMarksPhy)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_phy);
        frame_phy.setBounds(150, 90, 570, 408);

        frame_mat.setClosable(true);
        frame_mat.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_mat.setIconifiable(true);
        frame_mat.setTitle("Maths marks");
        frame_mat.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_mat.setVisible(true);

        jLabel27.setText("Form");

        jLabel28.setText("Class name");

        jLabel29.setText("Set Year");

        jLabel30.setText("Set Term");

        combo_classMarksMath.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermMath.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_mathMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_mathMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_mathMarksKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tbl_mathMarks);

        btn_getStudentsMath.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsMath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsMath.setText("Show Students");
        btn_getStudentsMath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsMathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_matLayout = new javax.swing.GroupLayout(frame_mat.getContentPane());
        frame_mat.getContentPane().setLayout(frame_matLayout);
        frame_matLayout.setHorizontalGroup(
            frame_matLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_matLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_matLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(frame_matLayout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksMath, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsMath)))
                .addContainerGap())
        );
        frame_matLayout.setVerticalGroup(
            frame_matLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_matLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_matLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_matLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel27)
                        .addComponent(jLabel28)
                        .addComponent(combo_classMarksMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel29))
                    .addComponent(btn_getStudentsMath)
                    .addComponent(chooser_marksYearMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_matLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel30)
                        .addComponent(txt_finalMarksMath)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_mat);
        frame_mat.setBounds(150, 90, 570, 408);

        frame_kis.setClosable(true);
        frame_kis.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_kis.setIconifiable(true);
        frame_kis.setTitle("Kiswahili marks");
        frame_kis.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_kis.setVisible(true);

        jLabel23.setText("Form");

        jLabel24.setText("Class name");

        jLabel25.setText("Set Year");

        jLabel26.setText("Set Term");

        combo_classMarksKis.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTermKis.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_kisMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_kisMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_kisMarksKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tbl_kisMarks);

        btn_getStudentsKis.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudentsKis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudentsKis.setText("Show Students");
        btn_getStudentsKis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsKisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_kisLayout = new javax.swing.GroupLayout(frame_kis.getContentPane());
        frame_kis.getContentPane().setLayout(frame_kisLayout);
        frame_kisLayout.setHorizontalGroup(
            frame_kisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_kisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_kisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(frame_kisLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarksKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarksKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYearKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTermKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarksKis, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudentsKis)))
                .addContainerGap())
        );
        frame_kisLayout.setVerticalGroup(
            frame_kisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_kisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_kisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_kisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23)
                        .addComponent(jLabel24)
                        .addComponent(combo_classMarksKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarksKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25))
                    .addComponent(btn_getStudentsKis)
                    .addComponent(chooser_marksYearKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_kisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTermKis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel26)
                        .addComponent(txt_finalMarksKis)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_kis);
        frame_kis.setBounds(150, 90, 570, 408);

        frame_eng.setClosable(true);
        frame_eng.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_eng.setIconifiable(true);
        frame_eng.setTitle("English marks");
        frame_eng.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMarks.png"))); // NOI18N
        frame_eng.setVisible(true);

        jLabel13.setText("Form");

        jLabel14.setText("Class name");

        jLabel15.setText("Set Year");

        jLabel18.setText("Set Term");

        combo_classMarks.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_marksTerm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_engMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "House", "EN", "MD", "ED"
            }
        ));
        tbl_engMarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbl_engMarksKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_engMarks);

        btn_getStudents.setBackground(new java.awt.Color(255, 209, 43));
        btn_getStudents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getStudents.setText("Show Students");
        btn_getStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getStudentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_engLayout = new javax.swing.GroupLayout(frame_eng.getContentPane());
        frame_eng.getContentPane().setLayout(frame_engLayout);
        frame_engLayout.setHorizontalGroup(
            frame_engLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_engLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_engLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(frame_engLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_marksYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_marksTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_finalMarks, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_getStudents)))
                .addContainerGap())
        );
        frame_engLayout.setVerticalGroup(
            frame_engLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_engLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_engLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_engLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel14)
                        .addComponent(combo_classMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15))
                    .addComponent(btn_getStudents)
                    .addComponent(chooser_marksYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_engLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_marksTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18)
                        .addComponent(txt_finalMarks)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_eng);
        frame_eng.setBounds(150, 90, 570, 408);

        frame_StudentAdmission.setClosable(true);
        frame_StudentAdmission.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_StudentAdmission.setIconifiable(true);
        frame_StudentAdmission.setTitle("Add Student");
        frame_StudentAdmission.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMember.png"))); // NOI18N
        frame_StudentAdmission.setVisible(true);

        cmd_saveAdmit.setBackground(new java.awt.Color(2, 176, 219));
        cmd_saveAdmit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/save.png"))); // NOI18N
        cmd_saveAdmit.setText("Save");
        cmd_saveAdmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_saveAdmitActionPerformed(evt);
            }
        });

        jLabel2.setText("First Name:");

        txt_fname.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel6.setText("Other Names:");

        jLabel7.setText("Gender:");

        gender.add(radio_male);
        radio_male.setSelected(true);
        radio_male.setText("Male");
        radio_male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_maleActionPerformed(evt);
            }
        });

        gender.add(radio_female);
        radio_female.setText("Female");
        radio_female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_femaleActionPerformed(evt);
            }
        });

        jLabel63.setText("Date Of Birth:");

        txt_dob.setDateFormatString("yyyy-MM-d");

        jLabel64.setText("KCPE Year:");

        jLabel65.setText("KCPE Marks:");

        jLabel66.setText("Birth Cert No:");

        jLabel1.setText("Admission No:");

        selectImage_btn.setBackground(new java.awt.Color(51, 204, 255));
        selectImage_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/uploadPic.png"))); // NOI18N
        selectImage_btn.setText("Select Picture");
        selectImage_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImage_btnActionPerformed(evt);
            }
        });

        jLabel16.setText("Form:");

        combo_class.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        jLabel3.setText("House:");

        combo_house.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CC", "PE", "EA", "OS" }));

        jLabel4.setText("Class name:");

        javax.swing.GroupLayout frame_StudentAdmissionLayout = new javax.swing.GroupLayout(frame_StudentAdmission.getContentPane());
        frame_StudentAdmission.getContentPane().setLayout(frame_StudentAdmissionLayout);
        frame_StudentAdmissionLayout.setHorizontalGroup(
            frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmd_saveAdmit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                        .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel63)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel64)
                                        .addComponent(jLabel66)
                                        .addComponent(jLabel65)
                                        .addComponent(jLabel1)))
                                .addComponent(selectImage_btn))
                            .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(combo_className, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo_class, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_house, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txt_adminNos)
                                .addComponent(txt_sname)
                                .addComponent(txt_fname)
                                .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                                    .addComponent(radio_male)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(radio_female))
                                .addComponent(txt_dob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txt_KCPEmarks)
                                .addComponent(txt_birthCert, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chooser_KCPEyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(imagePath_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        frame_StudentAdmissionLayout.setVerticalGroup(
            frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_StudentAdmissionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_sname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(radio_male)
                    .addComponent(radio_female))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel63)
                    .addComponent(txt_dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel64)
                    .addComponent(chooser_KCPEyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel65)
                    .addComponent(txt_KCPEmarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel66)
                    .addComponent(txt_birthCert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_adminNos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectImage_btn)
                    .addComponent(imagePath_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_class, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(combo_house, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_StudentAdmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_className, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd_saveAdmit, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addContainerGap())
        );

        DesktopPane.add(frame_StudentAdmission);
        frame_StudentAdmission.setBounds(50, 15, 363, 473);

        frame_editStudent.setClosable(true);
        frame_editStudent.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_editStudent.setIconifiable(true);
        frame_editStudent.setTitle("Edit Student Information");
        frame_editStudent.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editMember.png"))); // NOI18N
        frame_editStudent.setVisible(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txt_nameEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        genderEdit.add(radio_femaleEdit);
        radio_femaleEdit.setText("Female");
        radio_femaleEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_femaleEditActionPerformed(evt);
            }
        });

        jLabel9.setText("Gender:");

        jLabel5.setText("Full Name:");

        genderEdit.add(radio_maleEdit);
        radio_maleEdit.setText("Male");
        radio_maleEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_maleEditActionPerformed(evt);
            }
        });

        jLabel10.setText("Admission No:");

        txt_adminNosEdit.setEnabled(false);

        jLabel17.setText("Form:");

        combo_classEdit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        jLabel11.setText("House:");

        combo_houseEdit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CC", "PE", "EA", "OS" }));

        jLabel12.setText("Class name:");

        changeNum.add(radio_keepNum);
        radio_keepNum.setText("Keep");
        radio_keepNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_keepNumActionPerformed(evt);
            }
        });

        changeNum.add(radio_changeNum);
        radio_changeNum.setText("Change");
        radio_changeNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_changeNumActionPerformed(evt);
            }
        });

        jLabel67.setText("Date Of Birth:");

        jLabel68.setText("KCPE Year:");

        jLabel70.setText("KCPE Marks:");

        jLabel71.setText("Birth Cert Nos:");

        edit_dob.setDateFormatString("Y-MM-d");

        editAttach_btn.setBackground(new java.awt.Color(51, 204, 255));
        editAttach_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/uploadPic.png"))); // NOI18N
        editAttach_btn.setText("Select picture");
        editAttach_btn.setEnabled(false);
        editAttach_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAttach_btnActionPerformed(evt);
            }
        });

        editPic.add(keepRadio);
        keepRadio.setSelected(true);
        keepRadio.setText("Keep Picture");
        keepRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keepRadioActionPerformed(evt);
            }
        });

        editPic.add(changeRadio);
        changeRadio.setText("Change Picture");
        changeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_classEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12))
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_classNameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combo_houseEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel70)
                            .addComponent(jLabel71)
                            .addComponent(jLabel68)
                            .addComponent(jLabel67)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_nameEdit)
                            .addComponent(txt_KCPEmarksEdit, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_birthCertEdit)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edit_dob, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chooser_KCPEyearEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(txt_adminNosEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radio_keepNum)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radio_changeNum))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(radio_maleEdit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radio_femaleEdit)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(editAttach_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(keepRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(changeRadio))
                            .addComponent(editImage_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_nameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_maleEdit)
                    .addComponent(radio_femaleEdit)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_adminNosEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(radio_keepNum)
                        .addComponent(radio_changeNum))
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edit_dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel67))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel68)
                    .addComponent(chooser_KCPEyearEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel70)
                    .addComponent(txt_KCPEmarksEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel71)
                    .addComponent(txt_birthCertEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editAttach_btn)
                    .addComponent(editImage_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keepRadio)
                    .addComponent(changeRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_classEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_houseEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        btn_saveStudenttEdit.setBackground(new java.awt.Color(2, 176, 219));
        btn_saveStudenttEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/save.png"))); // NOI18N
        btn_saveStudenttEdit.setText("Save");
        btn_saveStudenttEdit.setEnabled(false);
        btn_saveStudenttEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveStudenttEditActionPerformed(evt);
            }
        });

        txt_searchStudentEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchStudentEditKeyReleased(evt);
            }
        });

        tbl_studentEdit.setAutoCreateRowSorter(true);
        tbl_studentEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admn No", "Full Name", "Form", "Class name", "House"
            }
        ));
        tbl_studentEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_studentEditMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_studentEdit);

        btn_deleteStudenttEdit.setBackground(new java.awt.Color(255, 0, 0));
        btn_deleteStudenttEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btn_deleteStudenttEdit.setText("Delete");
        btn_deleteStudenttEdit.setEnabled(false);
        btn_deleteStudenttEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteStudenttEditActionPerformed(evt);
            }
        });

        jLabel8.setText("Search student:");

        javax.swing.GroupLayout frame_editStudentLayout = new javax.swing.GroupLayout(frame_editStudent.getContentPane());
        frame_editStudent.getContentPane().setLayout(frame_editStudentLayout);
        frame_editStudentLayout.setHorizontalGroup(
            frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_editStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_editStudentLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_searchStudentEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_editStudentLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_studentIDedit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_studentADMN, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(271, 271, 271))
                    .addGroup(frame_editStudentLayout.createSequentialGroup()
                        .addGroup(frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(frame_editStudentLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btn_saveStudenttEdit)
                                .addGap(31, 31, 31)
                                .addComponent(btn_deleteStudenttEdit))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frame_editStudentLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(29, Short.MAX_VALUE))))
        );
        frame_editStudentLayout.setVerticalGroup(
            frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_editStudentLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_searchStudentEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_studentIDedit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_studentADMN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frame_editStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_deleteStudenttEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_saveStudenttEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        DesktopPane.add(frame_editStudent);
        frame_editStudent.setBounds(20, 50, 790, 590);

        frame_finalMarks.setClosable(true);
        frame_finalMarks.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        frame_finalMarks.setIconifiable(true);
        frame_finalMarks.setResizable(true);
        frame_finalMarks.setTitle("Final results");
        frame_finalMarks.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports.png"))); // NOI18N
        frame_finalMarks.setVisible(true);

        jLabel19.setText("Form");

        jLabel20.setText("Class name");

        jLabel21.setText("Select Year");

        jLabel22.setText("Select Term");

        combo_classFinalMarks.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        combo_finalMarksTerm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        tbl_finalMarks.setAutoCreateRowSorter(true);
        tbl_finalMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ADM", "Name", "H", "ENG", "ENG-G", "KIS", "KIS-G", "MAT", "MAT-G", "PHY", "PHY-G", "CHE", "CHE-G", "BIO", "BIO-G", "HIS", "HIS-G", "GEO", "GEO-G", "CRE", "CRE-G", "AGR", "AGR-G", "BS", "BS-G", "TOT", "AV", "GD", "CP"
            }
        ));
        jScrollPane3.setViewportView(tbl_finalMarks);

        btn_getResutls.setBackground(new java.awt.Color(255, 209, 43));
        btn_getResutls.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/class.png"))); // NOI18N
        btn_getResutls.setText("Show results");
        btn_getResutls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getResutlsActionPerformed(evt);
            }
        });

        btn_genFinalReport.setBackground(new java.awt.Color(255, 209, 43));
        btn_genFinalReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports2.png"))); // NOI18N
        btn_genFinalReport.setText("Generate class report");
        btn_genFinalReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genFinalReportActionPerformed(evt);
            }
        });

        btn_genFinalReportStream.setBackground(new java.awt.Color(255, 209, 43));
        btn_genFinalReportStream.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports2.png"))); // NOI18N
        btn_genFinalReportStream.setText("Generate stream report");
        btn_genFinalReportStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genFinalReportStreamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frame_finalMarksLayout = new javax.swing.GroupLayout(frame_finalMarks.getContentPane());
        frame_finalMarks.getContentPane().setLayout(frame_finalMarksLayout);
        frame_finalMarksLayout.setHorizontalGroup(
            frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_finalMarksLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(frame_finalMarksLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classFinalMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_classNameFinalMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 480, Short.MAX_VALUE)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooser_finalMarksYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_finalMarksTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(btn_getResutls))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frame_finalMarksLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_genFinalReport)
                        .addGap(18, 18, 18)
                        .addComponent(btn_genFinalReportStream)))
                .addContainerGap())
        );
        frame_finalMarksLayout.setVerticalGroup(
            frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frame_finalMarksLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel20)
                        .addComponent(combo_classFinalMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_classNameFinalMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21)
                        .addComponent(jLabel19))
                    .addComponent(btn_getResutls)
                    .addComponent(chooser_finalMarksYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_finalMarksTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frame_finalMarksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_genFinalReport)
                    .addComponent(btn_genFinalReportStream))
                .addGap(10, 10, 10))
        );

        DesktopPane.add(frame_finalMarks);
        frame_finalMarks.setBounds(10, 90, 1038, 460);

        ToolBar.setFloatable(false);
        ToolBar.setRollover(true);
        ToolBar.add(jSeparator5);

        menuBtn_addStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMember.png"))); // NOI18N
        menuBtn_addStudent.setToolTipText("Add new student.");
        menuBtn_addStudent.setFocusable(false);
        menuBtn_addStudent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_addStudent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_addStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_addStudentActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_addStudent);

        menuBtn_editStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editMember.png"))); // NOI18N
        menuBtn_editStudent.setToolTipText("Edit student's information.");
        menuBtn_editStudent.setFocusable(false);
        menuBtn_editStudent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_editStudent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_editStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_editStudentActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_editStudent);
        ToolBar.add(jSeparator1);

        menuBtn_viewFinalMarks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports.png"))); // NOI18N
        menuBtn_viewFinalMarks.setToolTipText("View final results.");
        menuBtn_viewFinalMarks.setFocusable(false);
        menuBtn_viewFinalMarks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_viewFinalMarks.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_viewFinalMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_viewFinalMarksActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_viewFinalMarks);

        menuBtn_viewStudentPerfomance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/studentReport.png"))); // NOI18N
        menuBtn_viewStudentPerfomance.setToolTipText("View student's perfomance record.");
        menuBtn_viewStudentPerfomance.setFocusable(false);
        menuBtn_viewStudentPerfomance.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_viewStudentPerfomance.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_viewStudentPerfomance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_viewStudentPerfomanceActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_viewStudentPerfomance);

        menuBtn_viewSubAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/subReport.png"))); // NOI18N
        menuBtn_viewSubAnalysis.setToolTipText("Veiw / generate subject results anaysis.");
        menuBtn_viewSubAnalysis.setFocusable(false);
        menuBtn_viewSubAnalysis.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_viewSubAnalysis.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_viewSubAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_viewSubAnalysisActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_viewSubAnalysis);

        menuBtn_viewHouseAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/houseReport.png"))); // NOI18N
        menuBtn_viewHouseAnalysis.setToolTipText("View / generate house perfomance anaylsis report. ");
        menuBtn_viewHouseAnalysis.setFocusable(false);
        menuBtn_viewHouseAnalysis.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_viewHouseAnalysis.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_viewHouseAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_viewHouseAnalysisActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_viewHouseAnalysis);

        menuBtn_printTranscripts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/print.png"))); // NOI18N
        menuBtn_printTranscripts.setFocusable(false);
        menuBtn_printTranscripts.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuBtn_printTranscripts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuBtn_printTranscripts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtn_printTranscriptsActionPerformed(evt);
            }
        });
        ToolBar.add(menuBtn_printTranscripts);
        ToolBar.add(jSeparator2);

        lbl_examV.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_examV.setForeground(new java.awt.Color(255, 51, 0));
        lbl_examV.setText("ExamV");
        ToolBar.add(lbl_examV);

        jLabel82.setText("          ");
        ToolBar.add(jLabel82);

        lbl_catV.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_catV.setForeground(new java.awt.Color(255, 51, 0));
        lbl_catV.setText("CatV");
        ToolBar.add(lbl_catV);
        ToolBar.add(jSeparator4);

        lbl_user.setForeground(new java.awt.Color(0, 153, 255));
        lbl_user.setText("jLabel72");
        ToolBar.add(lbl_user);

        showProgress.setString("");

        geneState.setText("jLabel86");

        lbl_bottomExamV.setText("ExamV");

        lbl_bottomCATV.setText("CATv");

        javax.swing.GroupLayout StatusBarLayout = new javax.swing.GroupLayout(StatusBar);
        StatusBar.setLayout(StatusBarLayout);
        StatusBarLayout.setHorizontalGroup(
            StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusBarLayout.createSequentialGroup()
                .addComponent(lbl_bottomExamV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_bottomCATV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(geneState)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        StatusBarLayout.setVerticalGroup(
            StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(geneState)
                .addComponent(lbl_bottomExamV)
                .addComponent(lbl_bottomCATV))
            .addComponent(showProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        TaskPaneContainer.setBackground(new java.awt.Color(204, 204, 204));

        TaskPane_students.setBackground(new java.awt.Color(204, 204, 204));
        TaskPane_students.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/people.png"))); // NOI18N
        TaskPane_students.setSpecial(true);
        TaskPane_students.setTitle("Students");

        Hyperlink_addStudent.setClickedColor(new java.awt.Color(0, 51, 255));
        Hyperlink_addStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addMember.png"))); // NOI18N
        Hyperlink_addStudent.setText("Add new student");
        Hyperlink_addStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hyperlink_addStudentActionPerformed(evt);
            }
        });

        Hyperlink_editStudent.setClickedColor(new java.awt.Color(0, 51, 255));
        Hyperlink_editStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editMember.png"))); // NOI18N
        Hyperlink_editStudent.setText("Edit student info");
        Hyperlink_editStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hyperlink_editStudentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TaskPane_studentsLayout = new javax.swing.GroupLayout(TaskPane_students.getContentPane());
        TaskPane_students.getContentPane().setLayout(TaskPane_studentsLayout);
        TaskPane_studentsLayout.setHorizontalGroup(
            TaskPane_studentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaskPane_studentsLayout.createSequentialGroup()
                .addGroup(TaskPane_studentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Hyperlink_editStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hyperlink_addStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TaskPane_studentsLayout.setVerticalGroup(
            TaskPane_studentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaskPane_studentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Hyperlink_addStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(Hyperlink_editStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        TaskPane_reports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports.png"))); // NOI18N
        TaskPane_reports.setSpecial(true);
        TaskPane_reports.setTitle("Reports");

        Hyperlink_finalResults.setClickedColor(new java.awt.Color(0, 51, 255));
        Hyperlink_finalResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reports.png"))); // NOI18N
        Hyperlink_finalResults.setText("View final class results");
        Hyperlink_finalResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hyperlink_finalResultsActionPerformed(evt);
            }
        });

        Hyperlink_perfomanceResults.setClickedColor(new java.awt.Color(0, 51, 255));
        Hyperlink_perfomanceResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/studentReport.png"))); // NOI18N
        Hyperlink_perfomanceResults.setText("View student performance");
        Hyperlink_perfomanceResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hyperlink_perfomanceResultsActionPerformed(evt);
            }
        });

        Hyperlink_subjectAnalysis.setClickedColor(new java.awt.Color(0, 51, 255));
        Hyperlink_subjectAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/subReport.png"))); // NOI18N
        Hyperlink_subjectAnalysis.setText("View subject anaysis");
        Hyperlink_subjectAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hyperlink_subjectAnalysisActionPerformed(evt);
            }
        });

        Hyperlink_houseAnalysis.setClickedColor(new java.awt.Color(0, 51, 255));
        Hyperlink_houseAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/houseReport.png"))); // NOI18N
        Hyperlink_houseAnalysis.setText("View House analysis");
        Hyperlink_houseAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hyperlink_houseAnalysisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TaskPane_reportsLayout = new javax.swing.GroupLayout(TaskPane_reports.getContentPane());
        TaskPane_reports.getContentPane().setLayout(TaskPane_reportsLayout);
        TaskPane_reportsLayout.setHorizontalGroup(
            TaskPane_reportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Hyperlink_finalResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(Hyperlink_perfomanceResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(Hyperlink_subjectAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(Hyperlink_houseAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        TaskPane_reportsLayout.setVerticalGroup(
            TaskPane_reportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaskPane_reportsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Hyperlink_finalResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Hyperlink_perfomanceResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Hyperlink_subjectAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Hyperlink_houseAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout TaskPaneContainerLayout = new javax.swing.GroupLayout(TaskPaneContainer);
        TaskPaneContainer.setLayout(TaskPaneContainerLayout);
        TaskPaneContainerLayout.setHorizontalGroup(
            TaskPaneContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TaskPane_students, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TaskPane_reports, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TaskPaneContainerLayout.setVerticalGroup(
            TaskPaneContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaskPaneContainerLayout.createSequentialGroup()
                .addComponent(TaskPane_students, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TaskPane_reports, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 328, Short.MAX_VALUE))
        );

        jScrollPane18.setViewportView(TaskPaneContainer);

        jMenu1.setText("File");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        menu_editUsers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/editUser.png"))); // NOI18N
        menu_editUsers.setText("Manage Users");
        menu_editUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_editUsersActionPerformed(evt);
            }
        });
        jMenu2.add(menu_editUsers);

        menu_manTeachers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/manTeachers.png"))); // NOI18N
        menu_manTeachers.setText("Manage Teachers");
        menu_manTeachers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_manTeachersActionPerformed(evt);
            }
        });
        jMenu2.add(menu_manTeachers);

        menu_setVar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/cog.png"))); // NOI18N
        menu_setVar.setText("Set Marks Calc Variables");
        menu_setVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_setVarActionPerformed(evt);
            }
        });
        jMenu2.add(menu_setVar);
        jMenu2.add(jSeparator3);

        menu_restore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/recycleBin.png"))); // NOI18N
        menu_restore.setText("Restore Student");
        menu_restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_restoreActionPerformed(evt);
            }
        });
        jMenu2.add(menu_restore);

        menu_sysLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/sysLog.png"))); // NOI18N
        menu_sysLog.setText("System Log Report");
        menu_sysLog.setToolTipText("View the system log/events report.");
        menu_sysLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_sysLogActionPerformed(evt);
            }
        });
        jMenu2.add(menu_sysLog);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        menu_eng.setText("English");
        menu_eng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_engActionPerformed(evt);
            }
        });
        jMenu3.add(menu_eng);

        menu_kis.setText("Kiswahili");
        menu_kis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_kisActionPerformed(evt);
            }
        });
        jMenu3.add(menu_kis);

        menu_maths.setText("Maths");
        menu_maths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_mathsActionPerformed(evt);
            }
        });
        jMenu3.add(menu_maths);

        menu_phy.setText("Physics");
        menu_phy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_phyActionPerformed(evt);
            }
        });
        jMenu3.add(menu_phy);

        menu_bio.setText("Biology");
        menu_bio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_bioActionPerformed(evt);
            }
        });
        jMenu3.add(menu_bio);

        menu_chem.setText("Chemistry");
        menu_chem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_chemActionPerformed(evt);
            }
        });
        jMenu3.add(menu_chem);

        menu_geo.setText("Geography");
        menu_geo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_geoActionPerformed(evt);
            }
        });
        jMenu3.add(menu_geo);

        menu_his.setText("History");
        menu_his.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_hisActionPerformed(evt);
            }
        });
        jMenu3.add(menu_his);

        menu_cre.setText("CRE");
        menu_cre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_creActionPerformed(evt);
            }
        });
        jMenu3.add(menu_cre);

        menu_agr.setText("Agriculture");
        menu_agr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_agrActionPerformed(evt);
            }
        });
        jMenu3.add(menu_agr);

        menu_bs.setText("Business Studies");
        menu_bs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_bsActionPerformed(evt);
            }
        });
        jMenu3.add(menu_bs);

        jMenuBar1.add(jMenu3);

        menu_logout.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        menu_logout.setForeground(new java.awt.Color(0, 153, 255));
        menu_logout.setText(" Logout");
        menu_logout.setToolTipText("Logout of the system.");
        menu_logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_logoutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menu_logout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1170, Short.MAX_VALUE)
            .addComponent(StatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DesktopPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DesktopPane)
                    .addComponent(jScrollPane18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(1186, 842));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setExamVar(){
        
        try {
          conn=connect.ConnecrDb();
          String sql = "select * from exam_variables ";
         pst=conn.prepareStatement(sql);
                            
         rs=pst.executeQuery();
         if(rs.next()){
             String catVar = rs.getString("cat_var");
             String examVar = rs.getString("exam_var");
             
             lbl_examV.setText("Exam var: "+examVar);
             lbl_catV.setText("CAT var: "+catVar);
             
             lbl_bottomExamV.setText("Exam var: "+examVar);
             lbl_bottomCATV.setText("CAT var: "+catVar);
             
         }         
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex+" fourth errox");
      }finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
        
    }
    
    public void getClasses(){
     //fetch all classes from D.B
     try{
         conn=connect.ConnecrDb();
         String viewClass = "select * from class_name order by class_name asc ";
         pst = conn.prepareStatement(viewClass);
         rs = pst.executeQuery();
               
              while(rs.next()){
                  String getClass = rs.getString("class_name");
                  combo_className.addItem(getClass);
                  combo_classNameEdit.addItem(getClass);
                  combo_classNameMarks.addItem(getClass);
                  combo_classNameFinalMarks.addItem(getClass);
                  combo_classNameMarksKis.addItem(getClass);
                  combo_classNameMarksMath.addItem(getClass);
                  combo_classNameMarksPhy.addItem(getClass);
                  combo_classNameMarksChe.addItem(getClass);
                  combo_classNameMarksBio.addItem(getClass);
                  combo_classNameMarksHis.addItem(getClass);
                  combo_classNameMarksGeo.addItem(getClass);
                  combo_classNameMarksCRE.addItem(getClass);
                  combo_classNameMarksAgr.addItem(getClass);
                  combo_classNameMarksBs.addItem(getClass);
                  combo_classNameAna.addItem(getClass);
                  combo_classNameTrans.addItem(getClass);

              }
         
     }catch(SQLException | ClassNotFoundException ex){
         JOptionPane.showMessageDialog(null, ex+" probx1");
     }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
         
 }
    
    private void radio_femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_femaleActionPerformed
        sex = "female";
    }//GEN-LAST:event_radio_femaleActionPerformed

    private void radio_maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_maleActionPerformed
        sex = "male";
    }//GEN-LAST:event_radio_maleActionPerformed

    private void cmd_saveAdmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_saveAdmitActionPerformed
      //Save new student into d.b
        try{
            
            if(txt_fname.getText().isEmpty()){
               Toolkit.getDefaultToolkit().beep();
               JOptionPane.showMessageDialog(null, "Please fill First name!","Attention",JOptionPane.ERROR_MESSAGE);
           }else if(txt_sname.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Second name!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(txt_adminNos.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Student's admission number!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(((JTextField)txt_dob.getDateEditor().getUiComponent()).getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please insert Student's date of birth!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(txt_KCPEmarks.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Student's KCPE marks!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else{
              //check if student number is duplicated 
               String sqlx = "select * from students where admin_nos=? ";
               conn=connect.ConnecrDb();
               pst = conn.prepareStatement(sqlx);
               pst.setString(1, txt_adminNos.getText());
               rs = pst.executeQuery();
       
             if(rs.next()){
                 Toolkit.getDefaultToolkit().beep();
                 JOptionPane.showMessageDialog(null, "The admission number '"+txt_adminNos.getText()+"' is already registered!","Attention",JOptionPane.ERROR_MESSAGE);
             }else{ 
                 //save student info to system
                 String sql = "insert into students (name,admin_nos,gender,class,class_name,house,"
                         + "dob,kcpe_marks,kcpe_year,birth_cert,pic)values(?,?,?,?,?,?,?,?,?,?,?)";
                  conn=connect.ConnecrDb(); 
                  pst=conn.prepareStatement(sql);
                  pst.setString(1, txt_fname.getText()+" "+txt_sname.getText());
                  pst.setString(2, txt_adminNos.getText());
                  pst.setString(3, sex);
                  pst.setString(4, combo_class.getSelectedItem().toString());
                  pst.setString(5, combo_className.getSelectedItem().toString());
                  pst.setString(6, combo_house.getSelectedItem().toString());
                  pst.setString(7, ((JTextField)txt_dob.getDateEditor().getUiComponent()).getText());
                  pst.setString(8, txt_KCPEmarks.getText());
                  pst.setString(9, String.valueOf(chooser_KCPEyear.getValue()));
                  pst.setString(10, txt_birthCert.getText());
                  pst.setBytes(11, person_image);
                
                    
                  
                  
                  pst.execute();           
                  JOptionPane.showMessageDialog(null, "Student information saved.","Information",JOptionPane.INFORMATION_MESSAGE);
                  //insert add student event into log
                  savePersonLog(txt_fname.getText()+" "+txt_sname.getText());
                  txt_fname.setText("");
                  txt_sname.setText("");
                  txt_adminNos.setText("");
                  txt_KCPEmarks.setText("");
                  txt_birthCert.setText("");
                  imagePath_txt.setText("");
                                    
             }
           }
            
        }catch(HeadlessException | ClassNotFoundException | SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
                
    }//GEN-LAST:event_cmd_saveAdmitActionPerformed

    private void menuBtn_addStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_addStudentActionPerformed
        // Make add student visible
        if(sub_type.equals("Admin")){
        combo_className.removeAllItems();
        getClasses();
        frame_StudentAdmission.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuBtn_addStudentActionPerformed

    private void radio_femaleEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_femaleEditActionPerformed
        // TODO add your handling code here:
        sex_edit = "female";
    }//GEN-LAST:event_radio_femaleEditActionPerformed

    private void radio_maleEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_maleEditActionPerformed
        // TODO add your handling code here:
        sex_edit = "female";
    }//GEN-LAST:event_radio_maleEditActionPerformed

    private void btn_saveStudenttEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveStudenttEditActionPerformed
        // save edits made to student selected:
       if(state.equals("change")){ 
           //change image in edit student info
        try{            
                    
           if(txt_nameEdit.getText().isEmpty()){
               Toolkit.getDefaultToolkit().beep();
               JOptionPane.showMessageDialog(null, "Please fill Full name!","Attention",JOptionPane.ERROR_MESSAGE);
           }else if(txt_adminNosEdit.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Student admin number!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(((JTextField)edit_dob.getDateEditor().getUiComponent()).getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please insert Student's date of birth!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(txt_KCPEmarksEdit.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Student KCPE marks!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else{
               
               if(editStudentNum.equals("enable")){
                    //check if student number is duplicated 
                     String sqlx = "select * from students where admin_nos=? ";
                     conn=connect.ConnecrDb();
                     pst = conn.prepareStatement(sqlx);
                     pst.setString(1, txt_adminNosEdit.getText());
                     rs = pst.executeQuery();

                   if(rs.next()){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "The student number '"+txt_adminNosEdit.getText()+"' is already registered!","Attention",JOptionPane.ERROR_MESSAGE);
                   }else{ 
                       //edit student info to system
                       String sql = "update students set name=?,gender=?,class=?,class_name=?,"
                               + "house=?,admin_nos=?,dob=?,kcpe_year=?,kcpe_marks=?,birth_cert=?,pic=? where id =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_nameEdit.getText());
                        pst.setString(2, sex_edit);
                        pst.setString(3, combo_classEdit.getSelectedItem().toString());
                        pst.setString(4, combo_classNameEdit.getSelectedItem().toString());
                        pst.setString(5, combo_houseEdit.getSelectedItem().toString());
                        pst.setString(6, txt_adminNosEdit.getText());
                        pst.setString(7, ((JTextField)edit_dob.getDateEditor().getUiComponent()).getText());
                        pst.setString(8, String.valueOf(chooser_KCPEyearEdit.getValue()));
                        pst.setString(9, txt_KCPEmarksEdit.getText());
                        pst.setString(10, txt_birthCertEdit.getText());
                        pst.setBytes(11, person_image);
                        pst.setString(12, txt_studentIDedit.getText());
                        pst.execute();           
                        JOptionPane.showMessageDialog(null, "Student information saved.","Information",JOptionPane.INFORMATION_MESSAGE);
                        //insert edit member event into log
                        editPersonLog(txt_nameEdit.getText()+" - admin nos: "+txt_adminNosEdit.getText());
                        txt_nameEdit.setText("");
                        txt_adminNosEdit.setText("");
                        txt_KCPEmarksEdit.setText("");
                        txt_birthCertEdit.setText("");
                        radio_keepNum.setSelected(false);
                        radio_changeNum.setSelected(false);
                        ((DefaultTableModel)tbl_studentEdit.getModel()).setRowCount(0); 
                        //tbl_searchMember.removeAll();
                        txt_studentIDedit.setText("");
                        editImage_txt.setText("");
                        
                        btn_saveStudenttEdit.setEnabled(false);
                        btn_deleteStudenttEdit.setEnabled(false);
                     }
               }else if(editStudentNum.equals("disable")){
                       //edit student info to system
                       String sql = "update students set name=?,gender=?,class=?,class_name=?,"
                               + "house=?,dob=?,kcpe_year=?,kcpe_marks=?,birth_cert=?,pic=? where id =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_nameEdit.getText());
                        pst.setString(2, sex_edit);
                        pst.setString(3, combo_classEdit.getSelectedItem().toString());
                        pst.setString(4, combo_classNameEdit.getSelectedItem().toString());
                        pst.setString(5, combo_houseEdit.getSelectedItem().toString());
                        pst.setString(6, ((JTextField)edit_dob.getDateEditor().getUiComponent()).getText());
                        pst.setString(7, String.valueOf(chooser_KCPEyearEdit.getValue()));
                        pst.setString(8, txt_KCPEmarksEdit.getText());
                        pst.setString(9, txt_birthCertEdit.getText());
                        pst.setBytes(10, person_image);
                        pst.setString(11, txt_studentIDedit.getText());
                        pst.execute();                     
                        JOptionPane.showMessageDialog(null, "Student information saved.","Information",JOptionPane.INFORMATION_MESSAGE);
                        //insert edit member event into log
                        editPersonLog(txt_nameEdit.getText()+" - admin nos: "+txt_adminNosEdit.getText());
                        ((DefaultTableModel)tbl_studentEdit.getModel()).setRowCount(0); 
                        //tbl_searchMember.removeAll();
                                                  
                    }

                }     
         
                  
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
               JOptionPane.showMessageDialog(null, ex); 
            }finally {
                try {
                    rs.close();
                    conn.close();
                    pst.close();
                } catch (SQLException ex) {
                    //JOptionPane.showMessageDialog(null, ex);
                }
             }
        
       }else if(state.equals("keep")){ 
        //keep image in edit student info
        try{            
                    
           if(txt_nameEdit.getText().isEmpty()){
               Toolkit.getDefaultToolkit().beep();
               JOptionPane.showMessageDialog(null, "Please fill Full name!","Attention",JOptionPane.ERROR_MESSAGE);
           }else if(txt_adminNosEdit.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Student admin number!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(((JTextField)edit_dob.getDateEditor().getUiComponent()).getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please insert Student's date of birth!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else if(txt_KCPEmarksEdit.getText().isEmpty()){
              Toolkit.getDefaultToolkit().beep();
              JOptionPane.showMessageDialog(null, "Please fill Student KCPE marks!","Attention",JOptionPane.ERROR_MESSAGE);   
           }else{
               
               if(editStudentNum.equals("enable")){
                    //check if student number is duplicated 
                     String sqlx = "select * from students where admin_nos=? ";
                     conn=connect.ConnecrDb();
                     pst = conn.prepareStatement(sqlx);
                     pst.setString(1, txt_adminNosEdit.getText());
                     rs = pst.executeQuery();

                   if(rs.next()){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "The student number '"+txt_adminNosEdit.getText()+"' is already registered!","Attention",JOptionPane.ERROR_MESSAGE);
                   }else{ 
                       //edit student info to system
                       String sql = "update students set name=?,gender=?,class=?,class_name=?,"
                               + "house=?,admin_nos=?,dob=?,kcpe_year=?,kcpe_marks=?,birth_cert=? where id =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_nameEdit.getText());
                        pst.setString(2, sex_edit);
                        pst.setString(3, combo_classEdit.getSelectedItem().toString());
                        pst.setString(4, combo_classNameEdit.getSelectedItem().toString());
                        pst.setString(5, combo_houseEdit.getSelectedItem().toString());
                        pst.setString(6, txt_adminNosEdit.getText());
                        pst.setString(7, ((JTextField)edit_dob.getDateEditor().getUiComponent()).getText());
                        pst.setString(8, String.valueOf(chooser_KCPEyearEdit.getValue()));
                        pst.setString(9, txt_KCPEmarksEdit.getText());
                        pst.setString(10, txt_birthCertEdit.getText());
                        pst.setString(11, txt_studentIDedit.getText());
                        pst.execute();           
                        JOptionPane.showMessageDialog(null, "Student information saved.","Information",JOptionPane.INFORMATION_MESSAGE);
                        //insert edit member event into log
                        editPersonLog(txt_nameEdit.getText()+" - admin nos: "+txt_adminNosEdit.getText());
                        txt_nameEdit.setText("");
                        txt_adminNosEdit.setText("");
                        txt_KCPEmarksEdit.setText("");
                        txt_birthCertEdit.setText("");
                        radio_keepNum.setSelected(false);
                        radio_changeNum.setSelected(false);
                        ((DefaultTableModel)tbl_studentEdit.getModel()).setRowCount(0); 
                        //tbl_searchMember.removeAll();
                        txt_studentIDedit.setText("");
                        editImage_txt.setText("");
                        
                        btn_saveStudenttEdit.setEnabled(false);
                        btn_deleteStudenttEdit.setEnabled(false);
                     }
               }else if(editStudentNum.equals("disable")){
                       //edit student info to system
                       String sql = "update students set name=?,gender=?,class=?,class_name=?,"
                               + "house=?,dob=?,kcpe_year=?,kcpe_marks=?,birth_cert=? where id =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_nameEdit.getText());
                        pst.setString(2, sex_edit);
                        pst.setString(3, combo_classEdit.getSelectedItem().toString());
                        pst.setString(4, combo_classNameEdit.getSelectedItem().toString());
                        pst.setString(5, combo_houseEdit.getSelectedItem().toString());
                        pst.setString(6, ((JTextField)edit_dob.getDateEditor().getUiComponent()).getText());
                        pst.setString(7, String.valueOf(chooser_KCPEyearEdit.getValue()));
                        pst.setString(8, txt_KCPEmarksEdit.getText());
                        pst.setString(9, txt_birthCertEdit.getText());
                        pst.setString(10, txt_studentIDedit.getText());
                        pst.execute();                     
                        JOptionPane.showMessageDialog(null, "Student information saved.","Information",JOptionPane.INFORMATION_MESSAGE);
                        //insert edit member event into log
                        editPersonLog(txt_nameEdit.getText()+" - admin nos: "+txt_adminNosEdit.getText());
                        ((DefaultTableModel)tbl_studentEdit.getModel()).setRowCount(0); 
                        //tbl_searchMember.removeAll();
                                                  
                    }

                }     
         
                  
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
               JOptionPane.showMessageDialog(null, ex); 
            }finally {
                try {
                    rs.close();
                    conn.close();
                    pst.close();
                } catch (SQLException ex) {
                    //JOptionPane.showMessageDialog(null, ex);
                }
             }
        
       }
        
        
        
        //edit student's rawMarks record
        editRawMarks();
        //edit student's finalMarks record
        editFinalMarks();
        
        txt_nameEdit.setText("");
        txt_adminNosEdit.setText("");
        txt_KCPEmarksEdit.setText("");
        txt_birthCertEdit.setText("");
        radio_keepNum.setSelected(false);
        radio_changeNum.setSelected(false);
        txt_studentIDedit.setText("");
        txt_studentADMN.setText("");
        editImage_txt.setText("");
        
        btn_saveStudenttEdit.setEnabled(false);
        btn_deleteStudenttEdit.setEnabled(false);
    }//GEN-LAST:event_btn_saveStudenttEditActionPerformed

    public void editRawMarks(){
        try{
            
            String sql = "update raw_marks set name=?,admin_nos=? where admin_nos =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_nameEdit.getText());
                        pst.setString(2, txt_adminNosEdit.getText());
                        pst.setString(3, txt_studentADMN.getText());
                        pst.execute();                     
                                    
        }catch(ClassNotFoundException | SQLException ex){
           JOptionPane.showMessageDialog(null, ex); 
        }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
    }
    
    public void editFinalMarks(){
        try{
            
            String sql = "update final_marks set name=?,admin_nos=?,gender=? where admin_nos =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_nameEdit.getText());
                        pst.setString(2, txt_adminNosEdit.getText());
                        pst.setString(3, sex_edit);
                        pst.setString(4, txt_studentADMN.getText());
                        pst.execute();                     
                                    
        }catch(ClassNotFoundException | SQLException ex){
           JOptionPane.showMessageDialog(null, ex); 
        }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
    }
    
    private void menuBtn_editStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_editStudentActionPerformed
        // Make edit student visible
        if(sub_type.equals("Admin")){
        combo_classNameEdit.removeAllItems();
        getClasses();
        frame_editStudent.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuBtn_editStudentActionPerformed

    private void txt_searchStudentEditKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchStudentEditKeyReleased
        // search for student to edit
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn nos',name as 'Full name',class as 'Form',"
                  + "class_name as 'Class name',house as 'house' from students where state='active' and name like ? or admin_nos like? "
                  + "order by name asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, "%"+txt_searchStudentEdit.getText()+"%");
         pst.setString(2, "%"+txt_searchStudentEdit.getText()+"%");
                   
         rs=pst.executeQuery();
         tbl_studentEdit.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_studentEdit.removeColumn(tbl_studentEdit.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_studentEdit.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_studentEdit.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_studentEdit.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_studentEdit.getColumnModel().getColumn(2).setHeaderRenderer(centerRenderer);
        tbl_studentEdit.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_studentEdit.getColumnModel().getColumn(3).setHeaderRenderer(centerRenderer);
        tbl_studentEdit.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_studentEdit.getColumnModel().getColumn(4).setHeaderRenderer(centerRenderer);
        tbl_studentEdit.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_txt_searchStudentEditKeyReleased

    private void tbl_studentEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_studentEditMouseClicked
        // select and grab info of student from search table
        try{
           conn=connect.ConnecrDb(); 
           int row = tbl_studentEdit.getSelectedRow();
           String id = tbl_studentEdit.getModel().getValueAt(row, 0).toString();
           String sql = "select * from students where id="+id+"  ";
           pst = conn.prepareStatement(sql);
           rs = pst.executeQuery();
           
           if(rs.next()){
               String add1 = rs.getString("id");
               txt_studentIDedit.setText(add1);
               String add2 = rs.getString("name");
               txt_nameEdit.setText(add2);
               String add3 = rs.getString("admin_nos");
               txt_adminNosEdit.setText(add3);
               String add4 = rs.getString("gender");
               if(add4.equals("male")){
                   radio_maleEdit.setSelected(true);
                   sex_edit = "male";
               }else if(add4.equals("female")){
                   radio_femaleEdit.setSelected(true);
                   sex_edit = "female";
               }
                
               String add5 = rs.getString("dob");
               ((JTextField)edit_dob.getDateEditor().getUiComponent()).setText(add5);
               String add6 = rs.getString("kcpe_year");
               chooser_KCPEyearEdit.setValue(Integer.parseInt(add6));
               String add7 = rs.getString("kcpe_marks");
               txt_KCPEmarksEdit.setText(add7);
               String add8 = rs.getString("birth_cert");
               txt_birthCertEdit.setText(add8);
               String add9 = rs.getString("admin_nos");
               txt_studentADMN.setText(add9);
               String add10 = rs.getString("class_name");
               combo_classNameEdit.setSelectedItem(add10);
               String add11 = rs.getString("class");
               combo_classEdit.setSelectedItem(add11);
               String add12 = rs.getString("house");
               combo_houseEdit.setSelectedItem(add12);
               
               
              btn_saveStudenttEdit.setEnabled(true);
              btn_deleteStudenttEdit.setEnabled(true); 
              editAttach_btn.setEnabled(false); 
              keepRadio.setSelected(true);
               
           }
           
       }catch(ClassNotFoundException | SQLException e){
        JOptionPane.showMessageDialog(null, e);    
       }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_tbl_studentEditMouseClicked

    private void radio_keepNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_keepNumActionPerformed
        // set admission nos box off:
        txt_adminNosEdit.setEnabled(false);
        editStudentNum = "disabled";
    }//GEN-LAST:event_radio_keepNumActionPerformed

    private void radio_changeNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_changeNumActionPerformed
        // set admission nos box on:
        txt_adminNosEdit.setEnabled(true);
        editStudentNum = "enable";
    }//GEN-LAST:event_radio_changeNumActionPerformed

    private void btn_deleteStudenttEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteStudenttEditActionPerformed
        // delete / move record to student_arc table:
      if(sub_type.equals("Admin")){  
        
      int p;
      p=JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this student?");
      if(p==0){ 
        
        try{
            String sql = "INSERT INTO students_arc select id,name,admin_nos,gender,dob,kcpe_marks,kcpe_year,birth_cert,"
                    + "class,class_name,house,pic,state from students where id =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_studentIDedit.getText());
                        pst.execute();           
                        //insert deletion(deactivation) of member event into log
                        deletePersonLog(txt_nameEdit.getText()+" - admin nos: "+txt_adminNosEdit.getText());
                                    
        }catch(ClassNotFoundException | SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
        }
        //delete student record from table "students"
        deleteStudent();
       }
      
     }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_deleteStudenttEditActionPerformed
    //delete student record from table "students"
    public void deleteStudent(){
    
    try{
            String sql = "delete from students where id =? ";
                        conn=connect.ConnecrDb(); 
                        pst=conn.prepareStatement(sql);
                        pst.setString(1, txt_studentIDedit.getText());
                        pst.execute();           
                        //insert deletion(deactivation) of member event into log
                        deletePersonLog(txt_nameEdit.getText()+" - admin nos: "+txt_adminNosEdit.getText());
                        txt_nameEdit.setText("");
                        txt_adminNosEdit.setText("");
                        radio_keepNum.setSelected(false);
                        radio_changeNum.setSelected(false);
                        ((DefaultTableModel)tbl_studentEdit.getModel()).setRowCount(0); 
                        //tbl_searchMember.removeAll();
                        txt_studentIDedit.setText("");
                        
                        btn_saveStudenttEdit.setEnabled(false);
                        btn_deleteStudenttEdit.setEnabled(false);
            
        }catch(ClassNotFoundException | SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
        }
    
}    
    
    private void menuEngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEngActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("English") || sub_type.equals("Admin")){
        combo_classNameMarks.removeAllItems();
        getClasses();
        frame_eng.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuEngActionPerformed

    private void btn_getStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsActionPerformed
        // populate table with students from selected class and english subject:
        String year = String.valueOf(chooser_marksYear.getValue());
        String term = combo_marksTerm.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select english from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and english <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select english from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and english <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select english from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and english <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarks.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarks.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_engMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_engMarks.removeColumn(tbl_engMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_engMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_engMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_engMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_engMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsActionPerformed
//------ handle the english marks here-----:
    private void tbl_engMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_engMarksKeyReleased
        // handle the english marks here:
        String year = String.valueOf(chooser_marksYear.getValue());
        String term = combo_marksTerm.getSelectedItem().toString();
        String classx = combo_classMarks.getSelectedItem().toString();
        String className = combo_classNameMarks.getSelectedItem().toString();
        
        english eng = new english();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_engMarks.getSelectedRow();
                int column = tbl_engMarks.getSelectedColumn();

                // resul is the new value to insert in the DB
                String marks = tbl_engMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_engMarks.getValueAt(row, 0).toString();
                String fullName = tbl_engMarks.getValueAt(row, 1).toString();
                String house = tbl_engMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                      if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    eng.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    eng.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    eng.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    eng.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    eng.getGender(admin_nos);
                    //insert entry into final_mark DB
                    eng.populateFinalMarks(fullName,admin_nos,house,classx,term,year,className);
                    //get total final marks(can be used on any subject)
                    eng.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    eng.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    eng.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    eng.populateRankTbl(term,classx,year,className);
                    }
                    
                }else if(column==4){
                      if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                        Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    eng.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    eng.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    eng.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    eng.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    eng.getGender(admin_nos);
                    //insert entry into final_mark DB
                    eng.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    eng.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    eng.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    eng.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    eng.populateRankTbl(term,classx,year,className);
                    }
                    
                }else if(column==5){
                      if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                        Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    eng.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    eng.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    eng.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    eng.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    eng.getGender(admin_nos);
                    //insert entry into final_mark DB
                    eng.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    eng.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    eng.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    eng.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    eng.populateRankTbl(term,classx,year,className);
                    }
                    
                }             
        }
        
    }//GEN-LAST:event_tbl_engMarksKeyReleased

    private void btn_getResutlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getResutlsActionPerformed
        // TODO add your handling code here:
        try{
            
            conn=connect.ConnecrDb();
          String sql = "select id, admin_nos as 'ADM', name as 'Name',house as 'H',english as 'ENG',english_g as 'ENG-G',kiswahili as  'KIS',kiswahili_g as 'KIS-G', " +
"maths as 'MAT',math_g as 'MAT-G',physics as 'PHY',physics_g as 'PHY-G',chemistry as 'CHE',chemistry_g as 'CHE-G',biology as 'BIO',biology_g as 'BIO-G', " +
"histroy as 'HIS',histroy_g as 'HIS-G',geography as 'GEO',geography_g as 'GEO-G',cre as 'CRE',cre_g as 'CRE-G',agriculture as 'AGR',agriculture_g as 'AGR-G', " +
"buisness_studies as 'BS',business_studies_g as 'BS-G',total as 'TOT',avarage as 'AV',grade as 'GD' " +
" from final_marks where class = ? and term = ? and year = ? and class_name = ? order by avarage desc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classFinalMarks.getSelectedItem().toString());
         pst.setString(2, combo_finalMarksTerm.getSelectedItem().toString());
         pst.setString(3, String.valueOf(chooser_finalMarksYear.getValue()));
         pst.setString(4, combo_classNameFinalMarks.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_finalMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_finalMarks.removeColumn(tbl_finalMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        for(int x=0;x<27;x++){
         tbl_finalMarks.getColumnModel().getColumn(x).setCellRenderer( centerRenderer );
         tbl_finalMarks.getColumnModel().getColumn(x).setHeaderRenderer(centerRenderer);
        }
        
        
        

            
        }catch(ClassNotFoundException | SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
    }//GEN-LAST:event_btn_getResutlsActionPerformed

    private void menuBtn_viewFinalMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_viewFinalMarksActionPerformed
        // TODO add your handling code here:
        combo_classNameFinalMarks.removeAllItems();
        getClasses();
        frame_finalMarks.setVisible(true);
    }//GEN-LAST:event_menuBtn_viewFinalMarksActionPerformed
//-----handle the kiswahili marks here------:
    private void tbl_kisMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_kisMarksKeyReleased
         // handle the english marks here:
        String year = String.valueOf(chooser_marksYearKis.getValue());
        String term = combo_marksTermKis.getSelectedItem().toString();
        String classx = combo_classMarksKis.getSelectedItem().toString();
        String className = combo_classNameMarksKis.getSelectedItem().toString();
        
        kiswahili kis = new kiswahili();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_kisMarks.getSelectedRow();
                int column = tbl_kisMarks.getSelectedColumn();

                // resul is the new value to insert in the DB
                String marks = tbl_kisMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_kisMarks.getValueAt(row, 0).toString();
                String fullName = tbl_kisMarks.getValueAt(row, 1).toString();
                String house = tbl_kisMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    kis.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    kis.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    kis.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    kis.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    kis.getGender(admin_nos);
                    //insert entry into final_mark DB
                    kis.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    kis.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    kis.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    kis.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    kis.populateRankTbl(term,classx,year,className);
                    }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    kis.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    kis.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    kis.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    kis.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    kis.getGender(admin_nos);
                    //insert entry into final_mark DB
                    kis.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    kis.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    kis.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    kis.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    kis.populateRankTbl(term,classx,year,className);
                    
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    kis.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    kis.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    kis.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    kis.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    kis.getGender(admin_nos);
                    //insert entry into final_mark DB
                    kis.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    kis.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    kis.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    kis.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    kis.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_kisMarksKeyReleased

    private void btn_getStudentsKisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsKisActionPerformed
        // populate table with students from selected class and kiswahili subject:
        String year = String.valueOf(chooser_marksYearKis.getValue());
        String term = combo_marksTermKis.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select kiswahili from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and kiswahili <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select kiswahili from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and kiswahili <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select kiswahili from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and kiswahili <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksKis.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksKis.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_kisMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_kisMarks.removeColumn(tbl_kisMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_kisMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_kisMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_kisMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_kisMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsKisActionPerformed

    private void menuKisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuKisActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Kiswahili") || sub_type.equals("Admin")){
        combo_classNameMarksKis.removeAllItems();
        getClasses();
        frame_kis.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuKisActionPerformed
//-----handle the maths marks here------:
    private void tbl_mathMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_mathMarksKeyReleased
        // handle the math marks here:
        String year = String.valueOf(chooser_marksYearMath.getValue());
        String term = combo_marksTermMath.getSelectedItem().toString();
        String classx = combo_classMarksMath.getSelectedItem().toString();
        String className = combo_classNameMarksMath.getSelectedItem().toString();
        
        math mat = new math();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_mathMarks.getSelectedRow();
                int column = tbl_mathMarks.getSelectedColumn();

                // resul is the new value to insert in the DB
                String marks = tbl_mathMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_mathMarks.getValueAt(row, 0).toString();
                String fullName = tbl_mathMarks.getValueAt(row, 1).toString();
                String house = tbl_mathMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    mat.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    mat.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    mat.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    mat.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    mat.getGender(admin_nos);
                    //insert entry into final_mark DB
                    mat.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    mat.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    mat.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    mat.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    mat.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    mat.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    mat.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    mat.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    mat.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    mat.getGender(admin_nos);
                    //insert entry into final_mark DB
                    mat.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    mat.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    mat.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    mat.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    mat.populateRankTbl(term,classx,year,className);
                    
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    mat.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    mat.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    mat.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    mat.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    mat.getGender(admin_nos);
                    //insert entry into final_mark DB
                    mat.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    mat.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    mat.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    mat.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    mat.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_mathMarksKeyReleased

    private void btn_getStudentsMathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsMathActionPerformed
        // populate table with students from selected class and maths subject:
        String year = String.valueOf(chooser_marksYearMath.getValue());
        String term = combo_marksTermMath.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select maths from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and maths <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select maths from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and maths <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select maths from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and maths <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksMath.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksMath.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_mathMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_mathMarks.removeColumn(tbl_mathMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_mathMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_mathMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_mathMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_mathMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsMathActionPerformed

    private void menuMathsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMathsActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Maths") || sub_type.equals("Admin")){
        combo_classNameMarksMath.removeAllItems();
        getClasses();
        frame_mat.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuMathsActionPerformed
//-----handle the physics marks here------:
    private void tbl_phyMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_phyMarksKeyReleased
        // handle the physics marks here:
        String year = String.valueOf(chooser_marksYearPhy.getValue());
        String term = combo_marksTermPhy.getSelectedItem().toString();
        String classx = combo_classMarksPhy.getSelectedItem().toString();
        String className = combo_classNameMarksPhy.getSelectedItem().toString();
        
        physics phy = new physics();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_phyMarks.getSelectedRow();
                int column = tbl_phyMarks.getSelectedColumn();

                // resul is the new value to insert in the DB
                String marks = tbl_phyMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_phyMarks.getValueAt(row, 0).toString();
                String fullName = tbl_phyMarks.getValueAt(row, 1).toString();
                String house = tbl_phyMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    phy.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    phy.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    phy.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    phy.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    phy.getGender(admin_nos);
                    //insert entry into final_mark DB
                    phy.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    phy.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    phy.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    phy.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    phy.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    phy.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    phy.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    phy.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    phy.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    phy.getGender(admin_nos);
                    //insert entry into final_mark DB
                    phy.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    phy.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    phy.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    phy.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    phy.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    phy.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    phy.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    phy.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    phy.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    phy.getGender(admin_nos);
                    //insert entry into final_mark DB
                    phy.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    phy.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    phy.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    phy.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    phy.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_phyMarksKeyReleased

    private void btn_getStudentsPhyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsPhyActionPerformed
        // populate table with students from selected class and physics subject:
        String year = String.valueOf(chooser_marksYearPhy.getValue());
        String term = combo_marksTermPhy.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select physics from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and physics <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select physics from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and physics <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select physics from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and physics <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksPhy.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksPhy.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_phyMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_phyMarks.removeColumn(tbl_phyMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_phyMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_phyMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_phyMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_phyMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsPhyActionPerformed

    private void menuPhyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPhyActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Physics") || sub_type.equals("Admin")){
        combo_classNameMarksPhy.removeAllItems();
        getClasses();
        frame_phy.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuPhyActionPerformed
//------ handle the chemistry marks here-----:
    private void tbl_cheMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_cheMarksKeyReleased
        // handle the chemistry marks here:
        String year = String.valueOf(chooser_marksYearChe.getValue());
        String term = combo_marksTermChe.getSelectedItem().toString();
        String classx = combo_classMarksChe.getSelectedItem().toString();
        String className = combo_classNameMarksChe.getSelectedItem().toString();
        
        chemistry che = new chemistry();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_cheMarks.getSelectedRow();
                int column = tbl_cheMarks.getSelectedColumn();

                // resul is the new value to insert in the DB
                String marks = tbl_cheMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_cheMarks.getValueAt(row, 0).toString();
                String fullName = tbl_cheMarks.getValueAt(row, 1).toString();
                String house = tbl_cheMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    che.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    che.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    che.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    che.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    che.getGender(admin_nos);
                    //insert entry into final_mark DB
                    che.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    che.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    che.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    che.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    che.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    che.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    che.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    che.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    che.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    che.getGender(admin_nos);
                    //insert entry into final_mark DB
                    che.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    che.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    che.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    che.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    che.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    che.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    che.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    che.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    che.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    che.getGender(admin_nos);
                    //insert entry into final_mark DB
                    che.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    che.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    che.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    che.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    che.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_cheMarksKeyReleased

    private void btn_getStudentsCheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsCheActionPerformed
        // populate table with students from selected class and chemistry subject:
        String year = String.valueOf(chooser_marksYearChe.getValue());
        String term = combo_marksTermChe.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select chemistry from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and chemistry <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select chemistry from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and chemistry <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select chemistry from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and chemistry <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksChe.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksChe.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_cheMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_cheMarks.removeColumn(tbl_cheMarks.getColumnModel().getColumn(0));
         
          DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_cheMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_cheMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_cheMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_cheMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
         
         
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsCheActionPerformed

    private void menuChemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuChemActionPerformed
        if(sub_type.equals("Chemistry") || sub_type.equals("Admin")){
        combo_classNameMarksChe.removeAllItems();
        getClasses();
        frame_che.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuChemActionPerformed
//------ handle the biology marks here-----:
    private void tbl_bioMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_bioMarksKeyReleased
        // handle the biology marks here:
        String year = String.valueOf(chooser_marksYearBio.getValue());
        String term = combo_marksTermBio.getSelectedItem().toString();
        String classx = combo_classMarksBio.getSelectedItem().toString();
        String className = combo_classNameMarksBio.getSelectedItem().toString();
        
        biology bio = new biology();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_bioMarks.getSelectedRow();
                int column = tbl_bioMarks.getSelectedColumn();

                // resul is the new value to insert in the DB
                String marks = tbl_bioMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_bioMarks.getValueAt(row, 0).toString();
                String fullName = tbl_bioMarks.getValueAt(row, 1).toString();
                String house = tbl_bioMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    bio.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    bio.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    bio.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    bio.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    bio.getGender(admin_nos);
                    //insert entry into final_mark DB
                    bio.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    bio.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    bio.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    bio.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    bio.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    bio.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    bio.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    bio.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    bio.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    bio.getGender(admin_nos);
                    //insert entry into final_mark DB
                    bio.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    bio.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    bio.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    bio.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    bio.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    bio.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    bio.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    bio.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    bio.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    bio.getGender(admin_nos);
                    //insert entry into final_mark DB
                    bio.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    bio.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    bio.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    bio.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    bio.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_bioMarksKeyReleased

    private void btn_getStudentsBioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsBioActionPerformed
        // populate table with students from selected class and biology subject:
        String year = String.valueOf(chooser_marksYearBio.getValue());
        String term = combo_marksTermBio.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select biology from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and biology <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select biology from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and biology <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select biology from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and biology <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksBio.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksBio.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_bioMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_bioMarks.removeColumn(tbl_bioMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_bioMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_bioMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_bioMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_bioMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsBioActionPerformed

    private void menuBioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBioActionPerformed
        if(sub_type.equals("Biology") || sub_type.equals("Admin")){
        combo_classNameMarksBio.removeAllItems();
        getClasses();
        frame_bio.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuBioActionPerformed
//------ handle the histroy marks here-----:
    private void tbl_hisMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_hisMarksKeyReleased
        // handle the histroy marks here:
        String year = String.valueOf(chooser_marksYearHis.getValue());
        String term = combo_marksTermHis.getSelectedItem().toString();
        String classx = combo_classMarksHis.getSelectedItem().toString();
        String className = combo_classNameMarksHis.getSelectedItem().toString();
        
        history his = new history();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_hisMarks.getSelectedRow();
                int column = tbl_hisMarks.getSelectedColumn();

                // result is the new value to insert in the DB
                String marks = tbl_hisMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_hisMarks.getValueAt(row, 0).toString();
                String fullName = tbl_hisMarks.getValueAt(row, 1).toString();
                String house = tbl_hisMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    his.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    his.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    his.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    his.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    his.getGender(admin_nos);
                    //insert entry into final_mark DB
                    his.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    his.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    his.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    his.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    his.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    his.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    his.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    his.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    his.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    his.getGender(admin_nos);
                    //insert entry into final_mark DB
                    his.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    his.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    his.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    his.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    his.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    his.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    his.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    his.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    his.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    his.getGender(admin_nos);
                    //insert entry into final_mark DB
                    his.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    his.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    his.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    his.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    his.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_hisMarksKeyReleased

    private void btn_getStudentsHisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsHisActionPerformed
        // populate table with students from selected class and biology subject:
        String year = String.valueOf(chooser_marksYearHis.getValue());
        String term = combo_marksTermHis.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select histroy from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and histroy <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select histroy from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and histroy <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select histroy from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and histroy <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksHis.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksHis.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_hisMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_hisMarks.removeColumn(tbl_hisMarks.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_hisMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_hisMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_hisMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_hisMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsHisActionPerformed

    private void menuHisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHisActionPerformed
        if(sub_type.equals("History") || sub_type.equals("Admin")){
        combo_classNameMarksHis.removeAllItems();
        getClasses();
        frame_his.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuHisActionPerformed
//------ handle the geography marks here-----:
    private void tbl_geoMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_geoMarksKeyReleased
        // handle the geography marks here:
        String year = String.valueOf(chooser_marksYearGeo.getValue());
        String term = combo_marksTermGeo.getSelectedItem().toString();
        String classx = combo_classMarksGeo.getSelectedItem().toString();
        String className = combo_classNameMarksGeo.getSelectedItem().toString();
        
        geography geo = new geography();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_geoMarks.getSelectedRow();
                int column = tbl_geoMarks.getSelectedColumn();

                // result is the new value to insert in the DB
                String marks = tbl_geoMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_geoMarks.getValueAt(row, 0).toString();
                String fullName = tbl_geoMarks.getValueAt(row, 1).toString();
                String house = tbl_geoMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    geo.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    geo.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    geo.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    geo.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    geo.getGender(admin_nos);
                    //insert entry into final_mark DB
                    geo.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    geo.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    geo.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    geo.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    geo.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    geo.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    geo.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    geo.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    geo.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    geo.getGender(admin_nos);
                    //insert entry into final_mark DB
                    geo.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    geo.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    geo.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    geo.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    geo.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    geo.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    geo.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    geo.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    geo.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    geo.getGender(admin_nos);
                    //insert entry into final_mark DB
                    geo.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    geo.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    geo.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    geo.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    geo.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_geoMarksKeyReleased

    private void btn_getStudentsGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsGeoActionPerformed
        // populate table with students from selected class and geography subject:
        String year = String.valueOf(chooser_marksYearGeo.getValue());
        String term = combo_marksTermGeo.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select geography from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and geography <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select geography from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and geography <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select geography from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and geography <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksGeo.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksGeo.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_geoMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_geoMarks.removeColumn(tbl_geoMarks.getColumnModel().getColumn(0));
         
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_geoMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_geoMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_geoMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_geoMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsGeoActionPerformed

    private void menuGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGeoActionPerformed
        if(sub_type.equals("Geography") || sub_type.equals("Admin")){
        combo_classNameMarksGeo.removeAllItems();
        getClasses();
        frame_geo.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuGeoActionPerformed
//------ handle the CRE marks here-----:
    private void tbl_creMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_creMarksKeyReleased
        // handle the CRE marks here:
        String year = String.valueOf(chooser_marksYearCRE.getValue());
        String term = combo_marksTermCRE.getSelectedItem().toString();
        String classx = combo_classMarksCRE.getSelectedItem().toString();
        String className = combo_classNameMarksCRE.getSelectedItem().toString();
        
        CRE cre = new CRE();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_creMarks.getSelectedRow();
                int column = tbl_creMarks.getSelectedColumn();

                // result is the new value to insert in the DB
                String marks = tbl_creMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_creMarks.getValueAt(row, 0).toString();
                String fullName = tbl_creMarks.getValueAt(row, 1).toString();
                String house = tbl_creMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    cre.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    cre.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    cre.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    cre.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    cre.getGender(admin_nos);
                    //insert entry into final_mark DB
                    cre.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    cre.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    cre.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    cre.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    cre.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    cre.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    cre.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    cre.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    cre.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    cre.getGender(admin_nos);
                    //insert entry into final_mark DB
                    cre.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    cre.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    cre.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    cre.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    cre.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    cre.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    cre.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    cre.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    cre.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    cre.getGender(admin_nos);
                    //insert entry into final_mark DB
                    cre.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    cre.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    cre.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    cre.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    cre.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_creMarksKeyReleased

    private void btn_getStudentsCREActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsCREActionPerformed
        // populate table with students from selected class and CRE subject:
        String year = String.valueOf(chooser_marksYearCRE.getValue());
        String term = combo_marksTermCRE.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select cre from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and cre <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select cre from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and cre <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select cre from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and cre <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksCRE.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksCRE.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_creMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_creMarks.removeColumn(tbl_creMarks.getColumnModel().getColumn(0));
         
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_creMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_creMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_creMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_creMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsCREActionPerformed

    private void menuCreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCreActionPerformed
        if(sub_type.equals("CRE") || sub_type.equals("Admin")){
        combo_classNameMarksCRE.removeAllItems();
        getClasses();
        frame_cre.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuCreActionPerformed
//------ handle the Agriculture marks here-----:
    private void tbl_agrMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_agrMarksKeyReleased
        // handle the Agriculture marks here:
        String year = String.valueOf(chooser_marksYearAgr.getValue());
        String term = combo_marksTermAgr.getSelectedItem().toString();
        String classx = combo_classMarksAgr.getSelectedItem().toString();
        String className = combo_classNameMarksAgr.getSelectedItem().toString();
        
        agriculture agr = new agriculture();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_agrMarks.getSelectedRow();
                int column = tbl_agrMarks.getSelectedColumn();

                // result is the new value to insert in the DB
                String marks = tbl_agrMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_agrMarks.getValueAt(row, 0).toString();
                String fullName = tbl_agrMarks.getValueAt(row, 1).toString();
                String house = tbl_agrMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    agr.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    agr.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    agr.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    agr.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    agr.getGender(admin_nos);
                    //insert entry into final_mark DB
                    agr.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    agr.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    agr.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    agr.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    agr.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    agr.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    agr.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    agr.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    agr.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    agr.getGender(admin_nos);
                    //insert entry into final_mark DB
                    agr.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    agr.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    agr.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    agr.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    agr.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    agr.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    agr.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    agr.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    agr.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    agr.getGender(admin_nos);
                    //insert entry into final_mark DB
                    agr.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    agr.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    agr.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    agr.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    agr.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_agrMarksKeyReleased

    private void btn_getStudentsAgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsAgrActionPerformed
        // populate table with students from selected class and agriculture subject:
        
        
        String year = String.valueOf(chooser_marksYearAgr.getValue());
        String term = combo_marksTermAgr.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select agriculture from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and agriculture <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select agriculture from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and agriculture <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select agriculture from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and agriculture <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksAgr.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksAgr.getSelectedItem().toString());
                                       
         rs=pst.executeQuery();
         tbl_agrMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_agrMarks.removeColumn(tbl_agrMarks.getColumnModel().getColumn(0));
         
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_agrMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_agrMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_agrMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_agrMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer ); 
                  
        
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsAgrActionPerformed

    private void menuAgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAgrActionPerformed
                
        if(sub_type.equals("Agriculture") || sub_type.equals("Admin")){
        combo_classNameMarksAgr.removeAllItems();
        getClasses();
        frame_agr.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuAgrActionPerformed
//------ handle the buisness studies marks here-----:
    private void tbl_bsMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_bsMarksKeyReleased
        // handle the buisness studies marks here:
        String year = String.valueOf(chooser_marksYearBs.getValue());
        String term = combo_marksTermBs.getSelectedItem().toString();
        String classx = combo_classMarksBs.getSelectedItem().toString();
        String className = combo_classNameMarksBs.getSelectedItem().toString();
        
        buisness_studies bs = new buisness_studies();
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                int row = tbl_bsMarks.getSelectedRow();
                int column = tbl_bsMarks.getSelectedColumn();

                // result is the new value to insert in the DB
                String marks = tbl_bsMarks.getValueAt(row, column).toString().trim();
                int markx = 0;
                if(marks.isEmpty()){  }else{
                markx = Integer.parseInt(marks);
                }
                // id is the primary key of my DB
                String admin_nos = tbl_bsMarks.getValueAt(row, 0).toString();
                String fullName = tbl_bsMarks.getValueAt(row, 1).toString();
                String house = tbl_bsMarks.getValueAt(row, 2).toString();
                
                if(column==3){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "EN";
                    //check is entry is an edit or a new entry in raw_marks DB
                    bs.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    bs.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    bs.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    bs.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    bs.getGender(admin_nos);
                    //insert entry into final_mark DB
                    bs.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    bs.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    bs.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    bs.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    bs.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==4){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>50)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 50!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "MD";
                    //check is entry is an edit or a new entry in raw_marks DB
                    bs.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    bs.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    bs.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    bs.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    bs.getGender(admin_nos);
                    //insert entry into final_mark DB
                    bs.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    bs.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    bs.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    bs.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    bs.populateRankTbl(term,classx,year,className);
                      }
                    
                }else if(column==5){
                    if(marks.contains("[a-zA-Z]+") == true){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a numeric or positive value!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else if((markx<0)||(markx>100)){
                       Toolkit.getDefaultToolkit().beep();
                       JOptionPane.showMessageDialog(null, "Please insert a number between 0 and 100!","Attention",JOptionPane.ERROR_MESSAGE);
                      }else{
                    String examType = "ED";
                    //check is entry is an edit or a new entry in raw_marks DB
                    bs.checkIfEdit(admin_nos, examType, classx, term, year);
                    //insert raw marks into DB
                    bs.populateRawMarks(fullName,admin_nos,house,examType,marks,classx, term, year,className);
                    //processed marks for final_marks DB
                    bs.prossFinalMark(admin_nos, classx, term, year);
                    //check if entry is an edit or new entry in final_marks DB
                    bs.checkFinalEdit(admin_nos, classx, term, year);
                    //insert gender into final_mark DB
                    bs.getGender(admin_nos);
                    //insert entry into final_mark DB
                    bs.populateFinalMarks(fullName,admin_nos,house,classx, term, year,className);
                    //get total final marks(can be used on any subject)
                    bs.getFinalTotalMarks(admin_nos,term, classx, year);
                    //<----------update final_marks tallies--------->
                    bs.updateFinalMarkTally(admin_nos,term, classx, year);
                    //<----------rank computation & tallies--------->
                    //check is entry is an edit or a new entry in rank DB
                    bs.checkRankTbl(term,classx,year,className);
                    //insert values into the rank DB
                    bs.populateRankTbl(term,classx,year,className);
                      }
                    
                }             
        }
    }//GEN-LAST:event_tbl_bsMarksKeyReleased

    private void btn_getStudentsBsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsBsActionPerformed
        // populate table with students from selected class and buisness studies subject:
        String year = String.valueOf(chooser_marksYearBs.getValue());
        String term = combo_marksTermBs.getSelectedItem().toString();
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',house as 'House'," +
"(select buisness_studies from raw_marks where exam_type = 'EN' AND year = '"+year+"' and term = '"+term+"' and buisness_studies <> '' and admin_nos = students.admin_nos) as 'EN'," +
"(select buisness_studies from raw_marks where exam_type = 'MD' AND year = '"+year+"' and term = '"+term+"' and buisness_studies <> '' and admin_nos = students.admin_nos) as 'MD'," +
"(select buisness_studies from raw_marks where exam_type = 'ED' AND year = '"+year+"' and term = '"+term+"' and buisness_studies <> '' and admin_nos = students.admin_nos) as 'ED'" +
" from students where state='active' and class=? and class_name=? order by admin_nos asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, combo_classMarksBs.getSelectedItem().toString());
         pst.setString(2, combo_classNameMarksBs.getSelectedItem().toString());
                   
         rs=pst.executeQuery();
         tbl_bsMarks.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_bsMarks.removeColumn(tbl_bsMarks.getColumnModel().getColumn(0));
         
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_bsMarks.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_bsMarks.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_bsMarks.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(5).setHeaderRenderer( centerRenderer );
        tbl_bsMarks.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_btn_getStudentsBsActionPerformed

    private void menuBisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBisActionPerformed
        if(sub_type.equals("Business") || sub_type.equals("Admin")){
        combo_classNameMarksBs.removeAllItems();
        getClasses();
        frame_bs.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuBisActionPerformed

    private void btn_genFinalReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genFinalReportActionPerformed
        finalReportClass classReport = new finalReportClass();
        showProgress.setIndeterminate(true);
        showProgress.setStringPainted(true);
        geneState.setVisible(true);
        geneState.setText("Generating report");
        showProgress.setString("Running...");
        classReport.execute();
        //make report for report generation
        //reportGenerationLog();
    }//GEN-LAST:event_btn_genFinalReportActionPerformed

    private void btn_genFinalReportStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genFinalReportStreamActionPerformed
        finalReportStream streamReport = new finalReportStream();
        showProgress.setIndeterminate(true);
        showProgress.setStringPainted(true);
        geneState.setVisible(true);
        geneState.setText("Generating report");
        showProgress.setString("Running...");
        streamReport.execute();
        //make report for report generation
        //reportGenerationLog();
    }//GEN-LAST:event_btn_genFinalReportStreamActionPerformed

    private void DesktopPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DesktopPaneMousePressed
        // show pop up menu:
        if(evt.isPopupTrigger()){
            PopupMenu.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_DesktopPaneMousePressed

    private void DesktopPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DesktopPaneMouseReleased
        // show pop up menu:
        if(evt.isPopupTrigger()){
            PopupMenu.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_DesktopPaneMouseReleased

    private void btn_genStudentAnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genStudentAnaActionPerformed
        // students analysis report:
        studentAnalysis stuAna = new studentAnalysis();
        showProgress.setIndeterminate(true);
        showProgress.setStringPainted(true);
        geneState.setVisible(true);
        geneState.setText("Generating report");
        showProgress.setString("Running...");
        stuAna.execute();
        //make report for report generation
        //reportGenerationLog();
    }//GEN-LAST:event_btn_genStudentAnaActionPerformed

    private void txt_searchStudentResultsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchStudentResultsKeyReleased
        // search for student for results
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,admin_nos as 'Admn No',name as 'Full Name',class as 'Form',"
                  + "class_name as 'Class name',house as 'House' from students where state='active' and name like ? or admin_nos like? "
                  + "order by name asc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, "%"+txt_searchStudentResults.getText()+"%");
         pst.setString(2, "%"+txt_searchStudentResults.getText()+"%");
                   
         rs=pst.executeQuery();
         tbl_studentSearchResult.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_studentSearchResult.removeColumn(tbl_studentSearchResult.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_studentSearchResult.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_studentSearchResult.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_studentSearchResult.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_studentSearchResult.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_studentSearchResult.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_studentSearchResult.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_studentSearchResult.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_studentSearchResult.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_studentSearchResult.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }//GEN-LAST:event_txt_searchStudentResultsKeyReleased

    private void tbl_studentSearchResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_studentSearchResultMouseClicked
        // select and grab info of student from search table
        try{
           conn=connect.ConnecrDb(); 
           int row = tbl_studentSearchResult.getSelectedRow();
           String id = tbl_studentSearchResult.getModel().getValueAt(row, 0).toString();
           String sql = "select * from students where id="+id+"  ";
           pst = conn.prepareStatement(sql);
           rs = pst.executeQuery();
           
           if(rs.next()){
               String add1 = rs.getString("admin_nos");
               txt_admnStudentResult.setText(add1);
                                             
              btn_genStudentAna.setEnabled(true);
                             
           }
           
       }catch(ClassNotFoundException | SQLException e){
        JOptionPane.showMessageDialog(null, e);    
       }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
        //populate the table to view students all final reports
        populateTableResultPerfomance();
    }//GEN-LAST:event_tbl_studentSearchResultMouseClicked

    private void tbl_studentResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_studentResultsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl_studentResultsMouseClicked

    private void menuBtn_viewStudentPerfomanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_viewStudentPerfomanceActionPerformed
        frame_studentResults.setVisible(true);
    }//GEN-LAST:event_menuBtn_viewStudentPerfomanceActionPerformed

    private void menu_editUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_editUsersActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Admin")){
        new ManageUsers().setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_editUsersActionPerformed

    private void menu_logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_logoutMouseClicked
        // TODO add your handling code here:
        LogoutLog();
        dispose();
        new login().setVisible(true);
    }//GEN-LAST:event_menu_logoutMouseClicked

    private void tbl_anaMarksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbl_anaMarksKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl_anaMarksKeyReleased

    private void btn_getStudentsAnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getStudentsAnaActionPerformed
        // TODO add your handling code here:
        String term = combo_marksTermAna.getSelectedItem().toString();
        String year = String.valueOf(chooser_marksYearAna.getValue());
        int classx = Integer.parseInt(combo_classAna.getSelectedItem().toString());
        String className = combo_classNameAna.getSelectedItem().toString();
        String subject = combo_subjectAna.getSelectedItem().toString();
        String subject_g = null;
        if(subject.equals("buisness_studies")){
         subject_g = "business_studies_g";
        }else if(subject.equals("maths")){
         subject_g = "math_g";
        }else{
         subject_g = subject+"_g";
        }
        
        subjectAnalysisView anaView = new subjectAnalysisView();
        anaView.subAnaView(term,classx,className,year,subject_g,subject);
    }//GEN-LAST:event_btn_getStudentsAnaActionPerformed

    private void menuBtn_viewSubAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_viewSubAnalysisActionPerformed
        combo_classNameAna.removeAllItems();
        getClasses();
        frame_subAnalysis.setVisible(true);
    }//GEN-LAST:event_menuBtn_viewSubAnalysisActionPerformed

    private void txt_genSubAnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_genSubAnaActionPerformed
        // TODO add your handling code here:
        
        String subject = combo_subjectAna.getSelectedItem().toString();
        String subject_g = null;
        if(subject.equals("buisness_studies")){
         subject_g = "business_studies_g";
         txt_subjectG.setText(subject_g);
        }else if(subject.equals("maths")){
         subject_g = "math_g";
         txt_subjectG.setText(subject_g);
        }else{
         subject_g = subject+"_g";
         txt_subjectG.setText(subject_g);
        }
        
        subjectAnalysis ana = new subjectAnalysis();
        showProgress.setIndeterminate(true);
        showProgress.setStringPainted(true);
        geneState.setVisible(true);
        geneState.setText("Generating report");
        showProgress.setString("Running...");
        ana.execute();        
        
//        ana.subjectAnalysis(term,classx,className,year,subject_g,subject);
    }//GEN-LAST:event_txt_genSubAnaActionPerformed

    private void menu_manTeachersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_manTeachersActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Admin")){
        new ManageTeachers().setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_manTeachersActionPerformed

    private void menu_restoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_restoreActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Admin")){
        new restore().setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_restoreActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // exit application from menu
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menu_sysLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_sysLogActionPerformed
        // TODO add your handling code here:
        new logReport().setVisible(true);
    }//GEN-LAST:event_menu_sysLogActionPerformed

    private void menuBtn_printTranscriptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_printTranscriptsActionPerformed
        // TODO add your handling code here:
        combo_classNameTrans.removeAllItems();
        getClasses();
        frame_trans.setVisible(true);
        
    }//GEN-LAST:event_menuBtn_printTranscriptsActionPerformed

    private void btn_printTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_printTransActionPerformed
        // handle the print class transcripts here:
//        String year = String.valueOf(chooser_YearTrans.getValue());
//        String term = combo_marksTrans.getSelectedItem().toString();
//        String classx = combo_classTrans.getSelectedItem().toString();
//        String className = combo_classNameTrans.getSelectedItem().toString();
        
        transcript trans = new transcript();
        showProgress.setIndeterminate(true);
        showProgress.setStringPainted(true);
        geneState.setVisible(true);
        geneState.setText("Generating report");
        showProgress.setString("Running...");
        trans.execute();        
        
//        //Destroy and delete table range
//        trans.dropRange();
//        //Destroy and delete table rangeL_Cpos
//        trans.dropRangeL_Cpos();
//        //Destroy and delete table rangeL_Fpos
//        trans.dropRangeL_Fpos();
//        //create and populate the table range
//        trans.createRange(classx, term, year, className);
//        //create and populate the rangeL_Cpos
//        trans.createRangeL_Cpos(classx, term, year, className);
//        //create and populate the rangeF_Fpos
//        trans.createRangeL_Fpos(classx, term, year, className);        
//        //create transcripts
//        trans.generateTranscript(classx, term, year, className);
        
        //task.isDone();
        
    }//GEN-LAST:event_btn_printTransActionPerformed

    private void selectImage_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImage_btnActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        filename=f.getAbsolutePath();
        imagePath_txt.setText(filename);

        try{
            File image = new File(filename);
            FileInputStream fis= new FileInputStream(image);
            ByteArrayOutputStream bos =new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for(int readNum; (readNum=fis.read(buf))!=-1;){
                bos.write(buf, 0, readNum);
            }
            person_image=bos.toByteArray();
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_selectImage_btnActionPerformed

    private void editAttach_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAttach_btnActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        filename=f.getAbsolutePath();
        editImage_txt.setText(filename);

        try{
            File image = new File(filename);
            FileInputStream fis= new FileInputStream(image);
            ByteArrayOutputStream bos =new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for(int readNum; (readNum=fis.read(buf))!=-1;){
                bos.write(buf, 0, readNum);
            }
            person_image=bos.toByteArray();
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_editAttach_btnActionPerformed

    private void keepRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keepRadioActionPerformed
        // TODO add your handling code here:
        state="keep";
        editAttach_btn.setEnabled(false);
    }//GEN-LAST:event_keepRadioActionPerformed

    private void changeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRadioActionPerformed
        // TODO add your handling code here:
        state="change";
        editAttach_btn.setEnabled(true);
    }//GEN-LAST:event_changeRadioActionPerformed

    private void btn_getHouseAnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getHouseAnaActionPerformed
        String term = combo_marksTermAnaHouse.getSelectedItem().toString();
        String year = String.valueOf(chooser_marksYearAnaHouse.getValue());
        int classx = Integer.parseInt(combo_classAnaHouse.getSelectedItem().toString());
        
        HouseAnalysisView houseAna = new HouseAnalysisView();
        if(classx <= 2){
        houseAna.houseAnaView(term, classx, year);
        }else if(classx >= 3){
        houseAna.houseAnaView2(term, classx, year);
        }
        
    }//GEN-LAST:event_btn_getHouseAnaActionPerformed

    private void txt_genHouseAnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_genHouseAnaActionPerformed
//        String term = combo_marksTermAnaHouse.getSelectedItem().toString();
//        String year = String.valueOf(chooser_marksYearAnaHouse.getValue());
//        int classx = Integer.parseInt(combo_classAnaHouse.getSelectedItem().toString());
        
        HouseAnalysis houseAnaGen = new HouseAnalysis();
        showProgress.setIndeterminate(true);
        showProgress.setStringPainted(true);
        geneState.setVisible(true);
        geneState.setText("Generating report");
        showProgress.setString("Running...");
        houseAnaGen.execute();        
        
//        houseAnaGen.dropHouse_pos();
//        houseAnaGen.createHouse_pos_PE(classx, term, year);
//        houseAnaGen.insertHouse_OS(classx, term, year);
//        houseAnaGen.insertHouse_CC(classx, term, year);
//        houseAnaGen.insertHouse_EA(classx, term, year);
//        houseAnaGen.insertHouse_TOTALS(classx, term, year);
//        //GENERATE THE REPORT
//        houseAnaGen.houseAnaGen(term, classx, year);
        
        
        
    }//GEN-LAST:event_txt_genHouseAnaActionPerformed

    private void menuBtn_viewHouseAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtn_viewHouseAnalysisActionPerformed
        frame_houseAnalysis.setVisible(true);
    }//GEN-LAST:event_menuBtn_viewHouseAnalysisActionPerformed

    private void menu_engActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_engActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("English") || sub_type.equals("Admin")){
        combo_classNameMarks.removeAllItems();
        getClasses();
        frame_eng.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_engActionPerformed

    private void menu_kisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_kisActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Kiswahili") || sub_type.equals("Admin")){
        combo_classNameMarksKis.removeAllItems();
        getClasses();
        frame_kis.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_kisActionPerformed

    private void menu_mathsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_mathsActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Maths") || sub_type.equals("Admin")){
        combo_classNameMarksMath.removeAllItems();
        getClasses();
        frame_mat.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_mathsActionPerformed

    private void menu_phyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_phyActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Physics") || sub_type.equals("Admin")){
        combo_classNameMarksPhy.removeAllItems();
        getClasses();
        frame_phy.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_phyActionPerformed

    private void menu_bioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_bioActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Biology") || sub_type.equals("Admin")){
        combo_classNameMarksBio.removeAllItems();
        getClasses();
        frame_bio.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_bioActionPerformed

    private void menu_chemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_chemActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Chemistry") || sub_type.equals("Admin")){
        combo_classNameMarksChe.removeAllItems();
        getClasses();
        frame_che.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_chemActionPerformed

    private void menu_geoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_geoActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Geography") || sub_type.equals("Admin")){
        combo_classNameMarksGeo.removeAllItems();
        getClasses();
        frame_geo.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_geoActionPerformed

    private void menu_hisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_hisActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("History") || sub_type.equals("Admin")){
        combo_classNameMarksHis.removeAllItems();
        getClasses();
        frame_his.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_hisActionPerformed

    private void menu_creActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_creActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("CRE") || sub_type.equals("Admin")){
        combo_classNameMarksCRE.removeAllItems();
        getClasses();
        frame_cre.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_creActionPerformed

    private void menu_agrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_agrActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Agriculture") || sub_type.equals("Admin")){
        combo_classNameMarksAgr.removeAllItems();
        getClasses();
        frame_agr.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_agrActionPerformed

    private void menu_bsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_bsActionPerformed
        // TODO add your handling code here:
        if(sub_type.equals("Business") || sub_type.equals("Admin")){
        combo_classNameMarksBs.removeAllItems();
        getClasses();
        frame_bs.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_bsActionPerformed

    private void menu_setVarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_setVarActionPerformed
        // TODO add your handling code here:
         if(sub_type.equals("Admin")){
        new examVar().setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_setVarActionPerformed

    private void Hyperlink_addStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hyperlink_addStudentActionPerformed
        // Make add student visible
        if(sub_type.equals("Admin")){
        combo_className.removeAllItems();
        getClasses();
        frame_StudentAdmission.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Hyperlink_addStudentActionPerformed

    private void Hyperlink_editStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hyperlink_editStudentActionPerformed
        // Make edit student visible
        if(sub_type.equals("Admin")){
        combo_classNameEdit.removeAllItems();
        getClasses();
        frame_editStudent.setVisible(true);
        }else{
         Toolkit.getDefaultToolkit().beep();   
         JOptionPane.showMessageDialog(null, "You do not have permission to access this feature!.","Permission Error!",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Hyperlink_editStudentActionPerformed

    private void Hyperlink_finalResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hyperlink_finalResultsActionPerformed
         // TODO add your handling code here:
        combo_classNameFinalMarks.removeAllItems();
        getClasses();
        frame_finalMarks.setVisible(true);
    }//GEN-LAST:event_Hyperlink_finalResultsActionPerformed

    private void Hyperlink_perfomanceResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hyperlink_perfomanceResultsActionPerformed
        frame_studentResults.setVisible(true);
    }//GEN-LAST:event_Hyperlink_perfomanceResultsActionPerformed

    private void Hyperlink_subjectAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hyperlink_subjectAnalysisActionPerformed
        combo_classNameAna.removeAllItems();
        getClasses();
        frame_subAnalysis.setVisible(true);
    }//GEN-LAST:event_Hyperlink_subjectAnalysisActionPerformed

    private void Hyperlink_houseAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hyperlink_houseAnalysisActionPerformed
        frame_houseAnalysis.setVisible(true);
    }//GEN-LAST:event_Hyperlink_houseAnalysisActionPerformed

    public void populateTableResultPerfomance(){
        //populate the table to view students all final reports
        try {
          conn=connect.ConnecrDb();
          String sql = "select id,class as 'Form',term as 'Term',year as 'Year',"
                  + "avarage as 'Average',grade as 'Grade' "
                  + "from final_marks where admin_nos = ? order by class desc,term desc, year desc ";
         pst=conn.prepareStatement(sql);
         pst.setString(1, txt_admnStudentResult.getText());
                            
         rs=pst.executeQuery();
         tbl_studentResults.setModel(DbUtils.resultSetToTableModel(rs));
         tbl_studentResults.removeColumn(tbl_studentResults.getColumnModel().getColumn(0));
         
         DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tbl_studentResults.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        tbl_studentResults.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        tbl_studentResults.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(2).setHeaderRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(3).setHeaderRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(4).setHeaderRenderer( centerRenderer );
        tbl_studentResults.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        
      } catch (SQLException | ClassNotFoundException ex) {
          JOptionPane.showMessageDialog(null, ex);
      }finally {
            try {
                rs.close();
                conn.close();
                pst.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
       }
    }
    
        
    //----------------------system log entries proccess-------------------------
    
    public void savePersonLog(String person){
        DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal2 = Calendar.getInstance();
        String Currdate = (dateFormat2.format(cal2.getTime())); //2014-08-06
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String CurrtimeStamp = (dateFormat.format(cal.getTime())); //2014-08-06 16:00:22
        
       try{
            //save member entry event 
           String logit = "insert into system_log (date,event_date,user,event)values(?,?,?,?)"; 
           conn=connect.ConnecrDb(); 
           pst=conn.prepareStatement(logit);
           pst.setString(1, Currdate);
           pst.setString(2, CurrtimeStamp);
           pst.setString(3, user);
           pst.setString(4, "Inserted new student named '"+person+"' into database.");
           pst.execute();
           
       }catch(ClassNotFoundException | SQLException ex){
          JOptionPane.showMessageDialog(null, ex); 
       }finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
   }
    
    public void editPersonLog(String person){
        DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal2 = Calendar.getInstance();
        String Currdate = (dateFormat2.format(cal2.getTime())); //2014-08-06
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String CurrtimeStamp = (dateFormat.format(cal.getTime())); //2014-08-06 16:00:22
        
       try{
            //save member entry event 
           String logit = "insert into system_log (date,event_date,user,event)values(?,?,?,?)"; 
           conn=connect.ConnecrDb(); 
           pst=conn.prepareStatement(logit);
           pst.setString(1, Currdate);
           pst.setString(2, CurrtimeStamp);
           pst.setString(3, user);
           pst.setString(4, "Edit of student named '"+person+"' into database.");
           pst.execute();
           
       }catch(ClassNotFoundException | SQLException ex){
          JOptionPane.showMessageDialog(null, ex); 
       }finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
   }
    
    public void deletePersonLog(String person){
        DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal2 = Calendar.getInstance();
        String Currdate = (dateFormat2.format(cal2.getTime())); //2014-08-06
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String CurrtimeStamp = (dateFormat.format(cal.getTime())); //2014-08-06 16:00:22
        
       try{
            //save member entry event 
           String logit = "insert into system_log (date,event_date,user,event)values(?,?,?,?)"; 
           conn=connect.ConnecrDb(); 
           pst=conn.prepareStatement(logit);
           pst.setString(1, Currdate);
           pst.setString(2, CurrtimeStamp);
           pst.setString(3, user);
           pst.setString(4, "Deletion of student named '"+person+"' from database.");
           pst.execute();
           
       }catch(ClassNotFoundException | SQLException ex){
          JOptionPane.showMessageDialog(null, ex); 
       }finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
   }
    
    public void LogoutLog(){
        DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal2 = Calendar.getInstance();
        String Currdate = (dateFormat2.format(cal2.getTime())); //2014-08-06
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String CurrtimeStamp = (dateFormat.format(cal.getTime())); //2014-08-06 16:00:22
        
       try{
            //save member entry event 
           String logit = "insert into system_log (date,event_date,user,event)values(?,?,?,?)"; 
           conn=connect.ConnecrDb(); 
           pst=conn.prepareStatement(logit);
           pst.setString(1, Currdate);
           pst.setString(2, CurrtimeStamp);
           pst.setString(3, user);
           pst.setString(4, "Logout by username '"+user+"' from the system.");
           pst.execute();
           
       }catch(ClassNotFoundException | SQLException ex){
          JOptionPane.showMessageDialog(null, ex); 
       }finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                //JOptionPane.showMessageDialog(null, ex);
            }
      }
   }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }
    
//String catVar = login.lbl_catVar.getText();
//String examVar = login.lbl_examVar.getText(); 

String sex = "male";
String sex_edit;
String editStudentNum = "disable";
String user = "test";
String edit;
String final_edit;
String sub_type = login.txt_type.getText();
//---------------------------------for final results----------------------------
String mean_grade;
double avg;
String total_marks;

//---------------------------------handle student pic upload----------------------------
    String state="keep";  

    private ImageIcon format = null;    
    String filename = "person_icon.png";
    int s=0;
    byte[] person_image=null;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane DesktopPane;
    private org.jdesktop.swingx.JXHyperlink Hyperlink_addStudent;
    private org.jdesktop.swingx.JXHyperlink Hyperlink_editStudent;
    private org.jdesktop.swingx.JXHyperlink Hyperlink_finalResults;
    private org.jdesktop.swingx.JXHyperlink Hyperlink_houseAnalysis;
    private org.jdesktop.swingx.JXHyperlink Hyperlink_perfomanceResults;
    private org.jdesktop.swingx.JXHyperlink Hyperlink_subjectAnalysis;
    private javax.swing.JPopupMenu PopupMenu;
    private org.jdesktop.swingx.JXStatusBar StatusBar;
    private org.jdesktop.swingx.JXTaskPaneContainer TaskPaneContainer;
    private org.jdesktop.swingx.JXTaskPane TaskPane_reports;
    private org.jdesktop.swingx.JXTaskPane TaskPane_students;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btn_deleteStudenttEdit;
    private javax.swing.JButton btn_genFinalReport;
    private javax.swing.JButton btn_genFinalReportStream;
    private javax.swing.JButton btn_genStudentAna;
    private javax.swing.JButton btn_getHouseAna;
    private javax.swing.JButton btn_getResutls;
    private javax.swing.JButton btn_getStudents;
    private javax.swing.JButton btn_getStudentsAgr;
    private javax.swing.JButton btn_getStudentsAna;
    private javax.swing.JButton btn_getStudentsBio;
    private javax.swing.JButton btn_getStudentsBs;
    private javax.swing.JButton btn_getStudentsCRE;
    private javax.swing.JButton btn_getStudentsChe;
    private javax.swing.JButton btn_getStudentsGeo;
    private javax.swing.JButton btn_getStudentsHis;
    private javax.swing.JButton btn_getStudentsKis;
    private javax.swing.JButton btn_getStudentsMath;
    private javax.swing.JButton btn_getStudentsPhy;
    private javax.swing.JButton btn_printTrans;
    private javax.swing.JButton btn_saveStudenttEdit;
    private javax.swing.ButtonGroup changeNum;
    private javax.swing.JRadioButton changeRadio;
    private com.toedter.calendar.JYearChooser chooser_KCPEyear;
    private com.toedter.calendar.JYearChooser chooser_KCPEyearEdit;
    public static com.toedter.calendar.JYearChooser chooser_YearTrans;
    public static com.toedter.calendar.JYearChooser chooser_finalMarksYear;
    private com.toedter.calendar.JYearChooser chooser_marksYear;
    private com.toedter.calendar.JYearChooser chooser_marksYearAgr;
    public static com.toedter.calendar.JYearChooser chooser_marksYearAna;
    public static com.toedter.calendar.JYearChooser chooser_marksYearAnaHouse;
    private com.toedter.calendar.JYearChooser chooser_marksYearBio;
    private com.toedter.calendar.JYearChooser chooser_marksYearBs;
    private com.toedter.calendar.JYearChooser chooser_marksYearCRE;
    private com.toedter.calendar.JYearChooser chooser_marksYearChe;
    private com.toedter.calendar.JYearChooser chooser_marksYearGeo;
    private com.toedter.calendar.JYearChooser chooser_marksYearHis;
    private com.toedter.calendar.JYearChooser chooser_marksYearKis;
    private com.toedter.calendar.JYearChooser chooser_marksYearMath;
    private com.toedter.calendar.JYearChooser chooser_marksYearPhy;
    private javax.swing.JButton cmd_saveAdmit;
    private javax.swing.JComboBox combo_class;
    public static javax.swing.JComboBox combo_classAna;
    public static javax.swing.JComboBox combo_classAnaHouse;
    private javax.swing.JComboBox combo_classEdit;
    public static javax.swing.JComboBox combo_classFinalMarks;
    private javax.swing.JComboBox combo_classMarks;
    private javax.swing.JComboBox combo_classMarksAgr;
    private javax.swing.JComboBox combo_classMarksBio;
    private javax.swing.JComboBox combo_classMarksBs;
    private javax.swing.JComboBox combo_classMarksCRE;
    private javax.swing.JComboBox combo_classMarksChe;
    private javax.swing.JComboBox combo_classMarksGeo;
    private javax.swing.JComboBox combo_classMarksHis;
    private javax.swing.JComboBox combo_classMarksKis;
    private javax.swing.JComboBox combo_classMarksMath;
    private javax.swing.JComboBox combo_classMarksPhy;
    private javax.swing.JComboBox combo_className;
    public static javax.swing.JComboBox combo_classNameAna;
    private javax.swing.JComboBox combo_classNameEdit;
    public static javax.swing.JComboBox combo_classNameFinalMarks;
    private javax.swing.JComboBox combo_classNameMarks;
    private javax.swing.JComboBox combo_classNameMarksAgr;
    private javax.swing.JComboBox combo_classNameMarksBio;
    private javax.swing.JComboBox combo_classNameMarksBs;
    private javax.swing.JComboBox combo_classNameMarksCRE;
    private javax.swing.JComboBox combo_classNameMarksChe;
    private javax.swing.JComboBox combo_classNameMarksGeo;
    private javax.swing.JComboBox combo_classNameMarksHis;
    private javax.swing.JComboBox combo_classNameMarksKis;
    private javax.swing.JComboBox combo_classNameMarksMath;
    private javax.swing.JComboBox combo_classNameMarksPhy;
    public static javax.swing.JComboBox combo_classNameTrans;
    public static javax.swing.JComboBox combo_classTrans;
    public static javax.swing.JComboBox combo_finalMarksTerm;
    private javax.swing.JComboBox combo_house;
    private javax.swing.JComboBox combo_houseEdit;
    private javax.swing.JComboBox combo_marksTerm;
    private javax.swing.JComboBox combo_marksTermAgr;
    public static javax.swing.JComboBox combo_marksTermAna;
    public static javax.swing.JComboBox combo_marksTermAnaHouse;
    private javax.swing.JComboBox combo_marksTermBio;
    private javax.swing.JComboBox combo_marksTermBs;
    private javax.swing.JComboBox combo_marksTermCRE;
    private javax.swing.JComboBox combo_marksTermChe;
    private javax.swing.JComboBox combo_marksTermGeo;
    private javax.swing.JComboBox combo_marksTermHis;
    private javax.swing.JComboBox combo_marksTermKis;
    private javax.swing.JComboBox combo_marksTermMath;
    private javax.swing.JComboBox combo_marksTermPhy;
    public static javax.swing.JComboBox combo_marksTrans;
    public static javax.swing.JComboBox combo_subjectAna;
    private javax.swing.JComboBox combo_userUserType;
    private javax.swing.JButton editAttach_btn;
    private javax.swing.JTextField editImage_txt;
    private javax.swing.ButtonGroup editPic;
    private com.toedter.calendar.JDateChooser edit_dob;
    private javax.swing.JInternalFrame frame_StudentAdmission;
    private javax.swing.JInternalFrame frame_agr;
    private javax.swing.JInternalFrame frame_bio;
    private javax.swing.JInternalFrame frame_bs;
    private javax.swing.JInternalFrame frame_che;
    private javax.swing.JInternalFrame frame_cre;
    private javax.swing.JInternalFrame frame_editStudent;
    private javax.swing.JInternalFrame frame_eng;
    private javax.swing.JInternalFrame frame_finalMarks;
    private javax.swing.JInternalFrame frame_geo;
    private javax.swing.JInternalFrame frame_his;
    private javax.swing.JInternalFrame frame_houseAnalysis;
    private javax.swing.JInternalFrame frame_kis;
    private javax.swing.JInternalFrame frame_mat;
    private javax.swing.JInternalFrame frame_phy;
    private javax.swing.JInternalFrame frame_studentResults;
    private javax.swing.JInternalFrame frame_subAnalysis;
    private javax.swing.JInternalFrame frame_trans;
    private javax.swing.ButtonGroup gender;
    private javax.swing.ButtonGroup genderEdit;
    public static javax.swing.JLabel geneState;
    private javax.swing.JTextField imagePath_txt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JRadioButton keepRadio;
    private javax.swing.JLabel lbl_bottomCATV;
    private javax.swing.JLabel lbl_bottomExamV;
    private javax.swing.JLabel lbl_catV;
    private javax.swing.JLabel lbl_examV;
    private javax.swing.JLabel lbl_user;
    private javax.swing.JMenuItem menuAgr;
    private javax.swing.JMenuItem menuBio;
    private javax.swing.JMenuItem menuBis;
    private javax.swing.JButton menuBtn_addStudent;
    private javax.swing.JButton menuBtn_editStudent;
    private javax.swing.JButton menuBtn_printTranscripts;
    private javax.swing.JButton menuBtn_viewFinalMarks;
    private javax.swing.JButton menuBtn_viewHouseAnalysis;
    private javax.swing.JButton menuBtn_viewStudentPerfomance;
    private javax.swing.JButton menuBtn_viewSubAnalysis;
    private javax.swing.JMenuItem menuChem;
    private javax.swing.JMenuItem menuCre;
    private javax.swing.JMenuItem menuEng;
    private javax.swing.JMenuItem menuGeo;
    private javax.swing.JMenuItem menuHis;
    private javax.swing.JMenuItem menuKis;
    private javax.swing.JMenuItem menuMaths;
    private javax.swing.JMenuItem menuPhy;
    private javax.swing.JMenuItem menu_agr;
    private javax.swing.JMenuItem menu_bio;
    private javax.swing.JMenuItem menu_bs;
    private javax.swing.JMenuItem menu_chem;
    private javax.swing.JMenuItem menu_cre;
    private javax.swing.JMenuItem menu_editUsers;
    private javax.swing.JMenuItem menu_eng;
    private javax.swing.JMenuItem menu_geo;
    private javax.swing.JMenuItem menu_his;
    private javax.swing.JMenuItem menu_kis;
    private javax.swing.JMenu menu_logout;
    private javax.swing.JMenuItem menu_manTeachers;
    private javax.swing.JMenuItem menu_maths;
    private javax.swing.JMenuItem menu_phy;
    private javax.swing.JMenuItem menu_restore;
    private javax.swing.JMenuItem menu_setVar;
    private javax.swing.JMenuItem menu_sysLog;
    private javax.swing.JRadioButton radio_changeNum;
    private javax.swing.JRadioButton radio_female;
    private javax.swing.JRadioButton radio_femaleEdit;
    private javax.swing.JRadioButton radio_keepNum;
    private javax.swing.JRadioButton radio_male;
    private javax.swing.JRadioButton radio_maleEdit;
    private javax.swing.JButton selectImage_btn;
    public static javax.swing.JProgressBar showProgress;
    private javax.swing.JTable tbl_agrMarks;
    public static javax.swing.JTable tbl_anaMarks;
    private javax.swing.JTable tbl_bioMarks;
    private javax.swing.JTable tbl_bsMarks;
    private javax.swing.JTable tbl_cheMarks;
    private javax.swing.JTable tbl_creMarks;
    private javax.swing.JTable tbl_engMarks;
    private javax.swing.JTable tbl_finalMarks;
    private javax.swing.JTable tbl_geoMarks;
    private javax.swing.JTable tbl_hisMarks;
    public static javax.swing.JTable tbl_houseAnaMarks;
    private javax.swing.JTable tbl_kisMarks;
    private javax.swing.JTable tbl_mathMarks;
    private javax.swing.JTable tbl_phyMarks;
    private javax.swing.JTable tbl_studentEdit;
    private javax.swing.JTable tbl_studentResults;
    private javax.swing.JTable tbl_studentSearchResult;
    private javax.swing.JTextField txt_KCPEmarks;
    private javax.swing.JTextField txt_KCPEmarksEdit;
    private javax.swing.JTextField txt_adminNos;
    private javax.swing.JTextField txt_adminNosEdit;
    public static javax.swing.JTextField txt_admnStudentResult;
    private javax.swing.JTextField txt_birthCert;
    private javax.swing.JTextField txt_birthCertEdit;
    private com.toedter.calendar.JDateChooser txt_dob;
    public static javax.swing.JTextField txt_finalMarks;
    public static javax.swing.JTextField txt_finalMarksAgr;
    public static javax.swing.JTextField txt_finalMarksBio;
    public static javax.swing.JTextField txt_finalMarksBs;
    public static javax.swing.JTextField txt_finalMarksCRE;
    public static javax.swing.JTextField txt_finalMarksChe;
    public static javax.swing.JTextField txt_finalMarksGeo;
    public static javax.swing.JTextField txt_finalMarksHis;
    public static javax.swing.JTextField txt_finalMarksKis;
    public static javax.swing.JTextField txt_finalMarksMath;
    public static javax.swing.JTextField txt_finalMarksPhy;
    private javax.swing.JTextField txt_fname;
    private javax.swing.JButton txt_genHouseAna;
    private javax.swing.JButton txt_genSubAna;
    private javax.swing.JTextField txt_nameEdit;
    private javax.swing.JTextField txt_searchStudentEdit;
    private javax.swing.JTextField txt_searchStudentResults;
    private javax.swing.JTextField txt_sname;
    private javax.swing.JTextField txt_studentADMN;
    private javax.swing.JTextField txt_studentIDedit;
    public static javax.swing.JTextField txt_subjectG;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        
    }

       
}
